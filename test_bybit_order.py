#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –†–ï–ê–õ–¨–ù–û–ì–û –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ—Ä–¥–µ—Ä–æ–≤ –Ω–∞ Bybit
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —á—Ç–æ –æ—Ä–¥–µ—Ä–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Å–æ–∑–¥–∞—é—Ç—Å—è –∏ –ø–æ–∑–∏—Ü–∏–∏ –æ—Ç–∫—Ä—ã–≤–∞—é—Ç—Å—è
"""

import asyncio
import os
import sys
import logging
from datetime import datetime, timezone
from dotenv import load_dotenv

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from exchanges.bybit import BybitExchange

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.DEBUG,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

load_dotenv()


async def test_real_order_execution():
    """
    –¢–µ—Å—Ç —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ—Ä–¥–µ—Ä–∞ —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π
    """

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∏—Ä–∂–∏
    exchange = BybitExchange({
        'api_key': os.getenv('BYBIT_API_KEY'),
        'api_secret': os.getenv('BYBIT_API_SECRET'),
        'testnet': True  # –í–ê–ñ–ù–û: –∏—Å–ø–æ–ª—å–∑—É–µ–º testnet –¥–ª—è —Ç–µ—Å—Ç–æ–≤
    })

    try:
        logger.info("=" * 60)
        logger.info("–¢–ï–°–¢ –†–ï–ê–õ–¨–ù–û–ì–û –í–´–ü–û–õ–ù–ï–ù–ò–Ø –û–†–î–ï–†–ê –ù–ê BYBIT")
        logger.info("=" * 60)

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
        await exchange.initialize()
        logger.info("‚úÖ –ë–∏—Ä–∂–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")

        # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞
        initial_balance = await exchange.get_balance()
        logger.info(f"üí∞ –ù–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å: ${initial_balance:.2f} USDT")

        if initial_balance < 20:
            logger.error("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–π –±–∞–ª–∞–Ω—Å –¥–ª—è —Ç–µ—Å—Ç–∞ (–Ω—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º $20)")
            return False

        # 2. –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞—á–∞–ª—å–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π
        initial_positions = await exchange.get_open_positions()
        logger.info(f"üìä –ù–∞—á–∞–ª—å–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏: {len(initial_positions)}")
        for pos in initial_positions:
            logger.info(f"   - {pos['symbol']}: {pos['quantity']} @ ${pos['entry_price']}")

        # 3. –í—ã–±–æ—Ä —Å–∏–º–≤–æ–ª–∞ –¥–ª—è —Ç–µ—Å—Ç–∞
        test_symbol = 'BTCUSDT'  # –°–∞–º—ã–π –ª–∏–∫–≤–∏–¥–Ω—ã–π —Å–∏–º–≤–æ–ª

        # 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã –∏ —Å–ø—Ä–µ–¥–∞
        ticker = await exchange.get_ticker(test_symbol)
        if not ticker:
            logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–∏–∫–µ—Ä –¥–ª—è {test_symbol}")
            return False

        current_price = ticker.get('price', 0)
        bid = ticker.get('bid', 0)
        ask = ticker.get('ask', 0)

        logger.info(f"üìà {test_symbol} - –¶–µ–Ω–∞: ${current_price:.2f}")
        logger.info(f"   Bid: ${bid:.2f}, Ask: ${ask:.2f}")

        if bid > 0 and ask > 0:
            spread_pct = ((ask - bid) / bid) * 100
            logger.info(f"   –°–ø—Ä–µ–¥: {spread_pct:.3f}%")

        # 5. –†–∞—Å—á–µ—Ç —Ä–∞–∑–º–µ—Ä–∞ –ø–æ–∑–∏—Ü–∏–∏
        position_size_usd = 20  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –¥–ª—è —Ç–µ—Å—Ç–∞
        quantity = position_size_usd / current_price

        logger.info(f"üìù –ü–ª–∞–Ω–∏—Ä—É–µ–º—ã–π –æ—Ä–¥–µ—Ä:")
        logger.info(f"   –†–∞–∑–º–µ—Ä: ${position_size_usd:.2f}")
        logger.info(f"   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {quantity:.6f} BTC")

        # 6. –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫—Ä–µ–¥–∏—Ç–Ω–æ–≥–æ –ø–ª–µ—á–∞
        leverage = 5
        leverage_set = await exchange.set_leverage(test_symbol, leverage)
        if leverage_set:
            logger.info(f"‚öôÔ∏è –ö—Ä–µ–¥–∏—Ç–Ω–æ–µ –ø–ª–µ—á–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {leverage}x")
        else:
            logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫—Ä–µ–¥–∏—Ç–Ω–æ–µ –ø–ª–µ—á–æ")

        # 7. –°–û–ó–î–ê–ù–ò–ï –†–´–ù–û–ß–ù–û–ì–û –û–†–î–ï–†–ê
        logger.info("=" * 40)
        logger.info("üöÄ –°–û–ó–î–ê–ù–ò–ï –†–´–ù–û–ß–ù–û–ì–û –û–†–î–ï–†–ê...")
        logger.info("=" * 40)

        order_result = await exchange.create_market_order(test_symbol, 'BUY', quantity)

        if order_result:
            logger.info("‚úÖ –û–†–î–ï–† –í–´–ü–û–õ–ù–ï–ù!")
            logger.info(f"   Order ID: {order_result.get('orderId')}")
            logger.info(f"   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {order_result.get('quantity'):.6f}")
            logger.info(f"   –¶–µ–Ω–∞: ${order_result.get('price'):.2f}")
            logger.info(f"   –°—Ç–∞—Ç—É—Å: {order_result.get('status')}")
        else:
            logger.error("‚ùå –û–†–î–ï–† –ù–ï –ë–´–õ –í–´–ü–û–õ–ù–ï–ù!")

            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
            logger.info("–ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞...")
            history_result = await exchange._make_request(
                "GET",
                "/v5/order/history",
                {
                    'category': 'linear',
                    'symbol': test_symbol,
                    'limit': 5
                },
                signed=True
            )

            if history_result and 'list' in history_result:
                logger.info(f"–ü–æ—Å–ª–µ–¥–Ω–∏–µ {len(history_result['list'])} –æ—Ä–¥–µ—Ä–æ–≤:")
                for order in history_result['list']:
                    logger.info(f"   - {order.get('orderId')[:8]}... "
                                f"Status: {order.get('orderStatus')} "
                                f"Qty: {order.get('cumExecQty')} "
                                f"Reason: {order.get('rejectReason')}")

        # 8. –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–π
        await asyncio.sleep(2)

        # 9. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤—ã—Ö –ø–æ–∑–∏—Ü–∏–π
        logger.info("=" * 40)
        logger.info("üìä –ü–†–û–í–ï–†–ö–ê –ü–û–ó–ò–¶–ò–ô –ü–û–°–õ–ï –û–†–î–ï–†–ê...")
        logger.info("=" * 40)

        new_positions = await exchange.get_open_positions()
        logger.info(f"–ü–æ–∑–∏—Ü–∏–∏ –ø–æ—Å–ª–µ –æ—Ä–¥–µ—Ä–∞: {len(new_positions)}")

        position_found = False
        for pos in new_positions:
            logger.info(f"   - {pos['symbol']}: {pos['quantity']} @ ${pos['entry_price']}")
            if pos['symbol'] == test_symbol:
                position_found = True

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–∑–∏—Ü–∏—è –Ω–æ–≤–∞—è –∏–ª–∏ —É–≤–µ–ª–∏—á–∏–ª–∞—Å—å
                old_pos = next((p for p in initial_positions if p['symbol'] == test_symbol), None)
                if old_pos:
                    qty_diff = pos['quantity'] - old_pos['quantity']
                    if qty_diff > 0:
                        logger.info(f"‚úÖ –ü–û–ó–ò–¶–ò–Ø –£–í–ï–õ–ò–ß–ï–ù–ê –Ω–∞ {qty_diff:.6f}")
                    else:
                        logger.warning(f"‚ö†Ô∏è –ü–æ–∑–∏—Ü–∏—è –Ω–µ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å")
                else:
                    logger.info(f"‚úÖ –ù–û–í–ê–Ø –ü–û–ó–ò–¶–ò–Ø –°–û–ó–î–ê–ù–ê!")

                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º PnL
                if 'pnl' in pos:
                    logger.info(f"   PnL: ${pos['pnl']:.2f} ({pos.get('pnl_percent', 0):.2f}%)")

        if not position_found and order_result:
            logger.error("‚ùå –ü–û–ó–ò–¶–ò–Ø –ù–ï –ù–ê–ô–î–ï–ù–ê, —Ö–æ—Ç—è –æ—Ä–¥–µ—Ä –±—ã–ª –≤—ã–ø–æ–ª–Ω–µ–Ω!")

        # 10. –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ –ø–æ—Å–ª–µ –æ—Ä–¥–µ—Ä–∞
        final_balance = await exchange.get_balance()
        balance_diff = initial_balance - final_balance
        logger.info(f"üí∞ –§–∏–Ω–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å: ${final_balance:.2f} USDT")
        logger.info(f"   –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: ${balance_diff:.2f}")

        # 11. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–π (executions)
        logger.info("=" * 40)
        logger.info("üìú –ü–†–û–í–ï–†–ö–ê –ò–°–ü–û–õ–ù–ï–ù–ò–ô...")
        logger.info("=" * 40)

        exec_result = await exchange._make_request(
            "GET",
            "/v5/execution/list",
            {
                'category': 'linear',
                'symbol': test_symbol,
                'limit': 5
            },
            signed=True
        )

        if exec_result and 'list' in exec_result:
            logger.info(f"–ü–æ—Å–ª–µ–¥–Ω–∏–µ {len(exec_result['list'])} –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–π:")
            for exec in exec_result['list'][:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ 3 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö
                exec_time = datetime.fromtimestamp(
                    int(exec.get('execTime', 0)) / 1000,
                    tz=timezone.utc
                ).strftime('%H:%M:%S')
                logger.info(f"   - {exec_time}: "
                            f"{exec.get('side')} {exec.get('execQty')} @ ${exec.get('execPrice')} "
                            f"Fee: ${exec.get('execFee')}")

        # 12. –ó–ê–ö–†–´–¢–ò–ï –¢–ï–°–¢–û–í–û–ô –ü–û–ó–ò–¶–ò–ò (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        if position_found and order_result:
            logger.info("=" * 40)
            logger.info("üîÑ –ó–ê–ö–†–´–¢–ò–ï –¢–ï–°–¢–û–í–û–ô –ü–û–ó–ò–¶–ò–ò...")
            logger.info("=" * 40)

            close_result = await exchange.close_position(test_symbol)
            if close_result:
                logger.info("‚úÖ –ü–æ–∑–∏—Ü–∏—è –∑–∞–∫—Ä—ã—Ç–∞")
            else:
                logger.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–∫—Ä—ã—Ç—å –ø–æ–∑–∏—Ü–∏—é")

            # –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
            await asyncio.sleep(2)
            final_positions = await exchange.get_open_positions()
            test_pos = next((p for p in final_positions if p['symbol'] == test_symbol), None)
            if not test_pos:
                logger.info("‚úÖ –ü–æ–∑–∏—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–∫—Ä—ã—Ç–∞")
            else:
                logger.warning(f"‚ö†Ô∏è –ü–æ–∑–∏—Ü–∏—è –≤—Å–µ –µ—â–µ –æ—Ç–∫—Ä—ã—Ç–∞: {test_pos['quantity']}")

        # –ò–¢–û–ì–û–í–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢
        logger.info("=" * 60)
        if order_result and position_found:
            logger.info("‚úÖ –¢–ï–°–¢ –£–°–ü–ï–®–ù–û –ü–†–û–ô–î–ï–ù!")
            logger.info("–û—Ä–¥–µ—Ä –±—ã–ª —Å–æ–∑–¥–∞–Ω, –≤—ã–ø–æ–ª–Ω–µ–Ω –∏ –ø–æ–∑–∏—Ü–∏—è –æ—Ç–∫—Ä—ã—Ç–∞")
            return True
        else:
            logger.error("‚ùå –¢–ï–°–¢ –ü–†–û–í–ê–õ–ï–ù!")
            if not order_result:
                logger.error("–û—Ä–¥–µ—Ä –Ω–µ –±—ã–ª –≤—ã–ø–æ–ª–Ω–µ–Ω")
            if not position_found:
                logger.error("–ü–æ–∑–∏—Ü–∏—è –Ω–µ –±—ã–ª–∞ —Å–æ–∑–¥–∞–Ω–∞")
            return False

    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        logger.error(traceback.format_exc())
        return False

    finally:
        if exchange:
            await exchange.close()
            logger.info("–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ")


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    success = await test_real_order_execution()

    if success:
        logger.info("\n‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
    else:
        logger.error("\n‚ùå –¢–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª–µ–Ω—ã - —Ç—Ä–µ–±—É–µ—Ç—Å—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–¥–∞")

    return success


if __name__ == "__main__":
    result = asyncio.run(main())
    sys.exit(0 if result else 1)