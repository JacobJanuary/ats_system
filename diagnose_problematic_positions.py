# diagnose_problematic_positions.py
# –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø–æ–∑–∏—Ü–∏–π –±–µ–∑ Trailing Stop

import asyncio
import aiohttp
import hmac
import hashlib
import time
import json
import os
from decimal import Decimal
from datetime import datetime
from dotenv import load_dotenv

load_dotenv()


class ProblematicPositionsDiagnostics:
    def __init__(self):
        self.api_key = os.getenv('BYBIT_API_KEY')
        self.api_secret = os.getenv('BYBIT_API_SECRET')
        self.testnet = os.getenv('BYBIT_TESTNET', 'false').lower() == 'true'
        self.base_url = "https://api-testnet.bybit.com" if self.testnet else "https://api.bybit.com"

    async def diagnose(self):
        """–î–µ—Ç–∞–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø–æ–∑–∏—Ü–∏–π –±–µ–∑ TS"""
        print("üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ü–†–û–ë–õ–ï–ú–ù–´–• –ü–û–ó–ò–¶–ò–ô –ë–ï–ó TRAILING STOP")
        print("=" * 70)

        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø–æ–∑–∏—Ü–∏–∏
        positions = await self.get_all_positions()

        if not positions:
            print("‚ùå –ù–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π")
            return

        # –ù–∞—Ö–æ–¥–∏–º –ø–æ–∑–∏—Ü–∏–∏ –±–µ–∑ TS
        positions_without_ts = []

        for pos in positions:
            trailing_stop = pos.get('trailingStop')
            if not trailing_stop or trailing_stop == '0' or trailing_stop == '':
                positions_without_ts.append(pos)

        print(f"\nüìä –ù–∞–π–¥–µ–Ω–æ {len(positions_without_ts)} –ø–æ–∑–∏—Ü–∏–π –±–µ–∑ Trailing Stop")

        if not positions_without_ts:
            print("‚úÖ –í—Å–µ –ø–æ–∑–∏—Ü–∏–∏ –∏–º–µ—é—Ç Trailing Stop!")
            return

        # –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∫–∞–∂–¥–æ–π –ø—Ä–æ–±–ª–µ–º–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏
        for idx, pos in enumerate(positions_without_ts, 1):
            print(f"\n{'=' * 70}")
            print(f"–ü–û–ó–ò–¶–ò–Ø #{idx}")
            print(f"{'=' * 70}")

            symbol = pos.get('symbol')
            side = pos.get('side')
            size = float(pos.get('size', 0))
            entry_price = float(pos.get('avgPrice', 0))
            mark_price = float(pos.get('markPrice', 0))
            created_time = pos.get('createdTime')

            # –†–∞—Å—á–µ—Ç P&L
            if side == 'Buy':
                pnl_percent = ((mark_price - entry_price) / entry_price * 100) if entry_price > 0 else 0
            else:
                pnl_percent = ((entry_price - mark_price) / entry_price * 100) if entry_price > 0 else 0

            # –í–æ–∑—Ä–∞—Å—Ç –ø–æ–∑–∏—Ü–∏–∏
            if created_time:
                created_dt = datetime.fromtimestamp(int(created_time) / 1000)
                age_hours = (datetime.now() - created_dt).total_seconds() / 3600
            else:
                age_hours = 0

            print(f"üìå Symbol: {symbol}")
            print(f"üìä Side: {side}")
            print(f"üìè Size: {size}")
            print(f"üíµ Entry Price: ${entry_price:.4f}")
            print(f"üí∞ Current Price: ${mark_price:.4f}")
            print(f"üìà P&L: {pnl_percent:.2f}%")
            print(f"‚è∞ Position Age: {age_hours:.1f} hours")

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥—Ä—É–≥–∏—Ö –∑–∞—â–∏—Ç
            stop_loss = pos.get('stopLoss')
            take_profit = pos.get('takeProfit')

            print(f"\nüõ°Ô∏è –¢–ï–ö–£–©–ê–Ø –ó–ê–©–ò–¢–ê:")
            print(f"   Stop Loss: {'‚úÖ ' + str(stop_loss) if stop_loss and stop_loss != '0' else '‚ùå –ù–ï–¢'}")
            print(f"   Take Profit: {'‚úÖ ' + str(take_profit) if take_profit and take_profit != '0' else '‚ùå –ù–ï–¢'}")
            print(f"   Trailing Stop: ‚ùå –ù–ï–¢")

            # –ê–Ω–∞–ª–∏–∑ –≤–æ–∑–º–æ–∂–Ω—ã—Ö –ø—Ä–∏—á–∏–Ω
            print(f"\nüîç –í–û–ó–ú–û–ñ–ù–´–ï –ü–†–ò–ß–ò–ù–´ –û–¢–°–£–¢–°–¢–í–ò–Ø TS:")

            # –ü—Ä–∏—á–∏–Ω–∞ 1: –°–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π —É–±—ã—Ç–æ–∫
            if pnl_percent < -5:
                print(f"   ‚ö†Ô∏è –ü–æ–∑–∏—Ü–∏—è –≤ –±–æ–ª—å—à–æ–º —É–±—ã—Ç–∫–µ ({pnl_percent:.2f}%)")
                print(f"      ‚Üí TS –º–æ–∂–µ—Ç –Ω–µ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å—Å—è –∏–∑-–∑–∞ —Å–ª–∏—à–∫–æ–º –±–ª–∏–∑–∫–æ–π —Ü–µ–Ω—ã –∞–∫—Ç–∏–≤–∞—Ü–∏–∏")

            # –ü—Ä–∏—á–∏–Ω–∞ 2: –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –¥–ª—è —Å–∏–º–≤–æ–ª–∞
            if mark_price < 1:
                print(f"   ‚ö†Ô∏è –ù–∏–∑–∫–∞—è —Ü–µ–Ω–∞ –∞–∫—Ç–∏–≤–∞ (${mark_price:.4f})")
                print(f"      ‚Üí –í–æ–∑–º–æ–∂–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã —Å tick size –∏–ª–∏ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º —à–∞–≥–æ–º —Ü–µ–Ω—ã")

            # –ü—Ä–∏—á–∏–Ω–∞ 3: –û—Å–æ–±—ã–µ —Å–∏–º–≤–æ–ª—ã
            if any(x in symbol for x in ['1000', 'SATS', 'SHIB', 'FLOKI']):
                print(f"   ‚ö†Ô∏è –û—Å–æ–±—ã–π —Å–∏–º–≤–æ–ª —Å –º–Ω–æ–∂–∏—Ç–µ–ª–µ–º")
                print(f"      ‚Üí –¢—Ä–µ–±—É–µ—Ç—Å—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ TS")

            # –ü—Ä–∏—á–∏–Ω–∞ 4: –°—Ç–∞—Ä–∞—è –ø–æ–∑–∏—Ü–∏—è
            if age_hours > 24:
                print(f"   ‚ö†Ô∏è –°—Ç–∞—Ä–∞—è –ø–æ–∑–∏—Ü–∏—è ({age_hours:.1f} —á–∞—Å–æ–≤)")
                print(f"      ‚Üí –í–æ–∑–º–æ–∂–Ω–æ, —Å–æ–∑–¥–∞–Ω–∞ –¥–æ –≤–Ω–µ–¥—Ä–µ–Ω–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –∑–∞—â–∏—Ç—ã")

            # –ü–æ–ø—ã—Ç–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å TS —Å —Ä–∞–∑–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
            print(f"\nüîß –ü–û–ü–´–¢–ö–ê –£–°–¢–ê–ù–û–í–ö–ò TRAILING STOP:")

            # –í–∞—Ä–∏–∞–Ω—Ç 1: –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π
            ts_result1 = await self.try_set_trailing_stop(
                pos,
                distance_percent=1.5,
                activation_offset=0.5,
                description="–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π (1.5%, –∞–∫—Ç–∏–≤–∞—Ü–∏—è +0.5%)"
            )

            if not ts_result1['success']:
                # –í–∞—Ä–∏–∞–Ω—Ç 2: –£–≤–µ–ª–∏—á–µ–Ω–Ω–∞—è –¥–∏—Å—Ç–∞–Ω—Ü–∏—è
                ts_result2 = await self.try_set_trailing_stop(
                    pos,
                    distance_percent=3.0,
                    activation_offset=1.0,
                    description="–£–≤–µ–ª–∏—á–µ–Ω–Ω—ã–π (3%, –∞–∫—Ç–∏–≤–∞—Ü–∏—è +1%)"
                )

                if not ts_result2['success']:
                    # –í–∞—Ä–∏–∞–Ω—Ç 3: –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π
                    ts_result3 = await self.try_set_trailing_stop(
                        pos,
                        distance_percent=0.5,
                        activation_offset=0.1,
                        description="–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π (0.5%, –∞–∫—Ç–∏–≤–∞—Ü–∏—è +0.1%)"
                    )

                    if not ts_result3['success']:
                        print(f"   ‚ùå –ù–ï –£–î–ê–ï–¢–°–Ø –£–°–¢–ê–ù–û–í–ò–¢–¨ TS –ù–ò –° –ö–ê–ö–ò–ú–ò –ü–ê–†–ê–ú–ï–¢–†–ê–ú–ò")
                        print(f"   –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:")
                        print(f"   - API –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –¥–ª—è —ç—Ç–æ–≥–æ —Å–∏–º–≤–æ–ª–∞")
                        print(f"   - –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–∞—è –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å")
                        print(f"   - –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –±–∏—Ä–∂–∏")

            # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
            print(f"\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
            if pnl_percent < -5:
                print(f"   1. –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –∑–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–∏ (—É–±—ã—Ç–æ–∫ {pnl_percent:.2f}%)")
            print(f"   2. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Ö–æ—Ç—è –±—ã Stop Loss –¥–ª—è –∑–∞—â–∏—Ç—ã")
            print(f"   3. –ú–æ–Ω–∏—Ç–æ—Ä—å—Ç–µ –ø–æ–∑–∏—Ü–∏—é –≤—Ä—É—á–Ω—É—é")

    async def get_all_positions(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–æ–∑–∏—Ü–∏–π"""
        timestamp = str(int(time.time() * 1000))
        params = {
            "category": "linear",
            "settleCoin": "USDT",
            "limit": "200"
        }

        param_str = "&".join([f"{k}={v}" for k, v in sorted(params.items())])
        sign_str = timestamp + self.api_key + "5000" + param_str
        signature = hmac.new(
            self.api_secret.encode('utf-8'),
            sign_str.encode('utf-8'),
            hashlib.sha256
        ).hexdigest()

        headers = {
            "X-BAPI-API-KEY": self.api_key,
            "X-BAPI-SIGN": signature,
            "X-BAPI-TIMESTAMP": timestamp,
            "X-BAPI-RECV-WINDOW": "5000"
        }

        url = f"{self.base_url}/v5/position/list?{param_str}"

        async with aiohttp.ClientSession() as session:
            async with session.get(url, headers=headers) as response:
                if response.status == 200:
                    data = await response.json()
                    if data.get('retCode') == 0:
                        positions = data.get('result', {}).get('list', [])
                        return [p for p in positions if float(p.get('size', 0)) > 0]
        return []

    async def try_set_trailing_stop(self, position, distance_percent, activation_offset, description):
        """–ü–æ–ø—ã—Ç–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å TS —Å –∑–∞–¥–∞–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏"""
        symbol = position.get('symbol')
        side = position.get('side')
        entry_price = float(position.get('avgPrice', 0))
        mark_price = float(position.get('markPrice', 0))

        print(f"\n   üîß –ü–æ–ø—ã—Ç–∫–∞: {description}")

        if entry_price == 0:
            print(f"      ‚ùå –ù–µ—Ç entry price")
            return {'success': False, 'error': 'No entry price'}

        # –†–∞—Å—á–µ—Ç trailing distance
        trailing_distance = entry_price * (distance_percent / 100)

        # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è —Å–∏–º–≤–æ–ª–æ–≤ —Å –º–Ω–æ–∂–∏—Ç–µ–ª–µ–º
        if '1000' in symbol:
            trailing_distance = trailing_distance * 1000

        # –†–∞—Å—á–µ—Ç activation price
        if side == 'Buy':
            activation_price = max(mark_price, entry_price) * (1 + activation_offset / 100)
        else:
            activation_price = min(mark_price, entry_price) * (1 - activation_offset / 100)

        # –û–∫—Ä—É–≥–ª–µ–Ω–∏–µ —Å–æ–≥–ª–∞—Å–Ω–æ tick size
        trailing_distance = self.round_to_tick_size(symbol, trailing_distance)
        activation_price = self.round_to_tick_size(symbol, activation_price)

        print(f"      Distance: {trailing_distance:.6f}")
        print(f"      Activation: {activation_price:.6f}")

        params = {
            "category": "linear",
            "symbol": symbol,
            "trailingStop": str(trailing_distance),
            "activePrice": str(activation_price),
            "positionIdx": 0
        }

        timestamp = str(int(time.time() * 1000))
        json_params = json.dumps(params, separators=(',', ':'))
        sign_str = timestamp + self.api_key + "5000" + json_params

        signature = hmac.new(
            self.api_secret.encode('utf-8'),
            sign_str.encode('utf-8'),
            hashlib.sha256
        ).hexdigest()

        headers = {
            "X-BAPI-API-KEY": self.api_key,
            "X-BAPI-SIGN": signature,
            "X-BAPI-TIMESTAMP": timestamp,
            "X-BAPI-RECV-WINDOW": "5000",
            "Content-Type": "application/json"
        }

        url = f"{self.base_url}/v5/position/trading-stop"

        async with aiohttp.ClientSession() as session:
            async with session.post(url, headers=headers, json=params) as response:
                result = await response.json()

                if result.get('retCode') == 0:
                    print(f"      ‚úÖ –£–°–ü–ï–®–ù–û –£–°–¢–ê–ù–û–í–õ–ï–ù!")
                    return {'success': True}
                else:
                    error_msg = result.get('retMsg', 'Unknown error')
                    error_code = result.get('retCode')
                    print(f"      ‚ùå –û—à–∏–±–∫–∞: {error_msg} (–∫–æ–¥: {error_code})")

                    # –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –æ—à–∏–±–∫–∏
                    if 'price' in error_msg.lower():
                        print(f"         ‚Üí –ü—Ä–æ–±–ª–µ–º–∞ —Å —Ü–µ–Ω–æ–π (–≤–æ–∑–º–æ–∂–Ω–æ, —Å–ª–∏—à–∫–æ–º –±–ª–∏–∑–∫–æ –∫ —Ç–µ–∫—É—â–µ–π)")
                    elif 'invalid' in error_msg.lower():
                        print(f"         ‚Üí –ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —ç—Ç–æ–≥–æ —Å–∏–º–≤–æ–ª–∞")
                    elif 'risk' in error_msg.lower():
                        print(f"         ‚Üí –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —Ä–∏—Å–∫-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç–∞ –±–∏—Ä–∂–∏")

                    return {'success': False, 'error': error_msg, 'code': error_code}

    def round_to_tick_size(self, symbol, price):
        """–û–∫—Ä—É–≥–ª–µ–Ω–∏–µ —Ü–µ–Ω—ã —Å–æ–≥–ª–∞—Å–Ω–æ tick size —Å–∏–º–≤–æ–ª–∞"""
        # –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞ - –Ω—É–∂–Ω–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ä–µ–∞–ª—å–Ω—ã–µ tick sizes –∏–∑ API
        if price < 0.001:
            return round(price, 8)
        elif price < 0.01:
            return round(price, 6)
        elif price < 1:
            return round(price, 4)
        elif price < 100:
            return round(price, 2)
        else:
            return round(price, 1)


async def main():
    diagnostics = ProblematicPositionsDiagnostics()
    await diagnostics.diagnose()


if __name__ == "__main__":
    print("üöÄ –ó–∞–ø—É—Å–∫ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π...\n")
    asyncio.run(main())