#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã Bybit testnet
–°–æ–∑–¥–∞–µ—Ç –æ—Ä–¥–µ—Ä–∞ –Ω–∞ 10 —Å–∞–º—ã—Ö –ª–∏–∫–≤–∏–¥–Ω—ã—Ö –ø–∞—Ä –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç SL
"""

import asyncio
import logging
import os
import sys
from datetime import datetime, timezone
from typing import List, Dict, Optional
from dotenv import load_dotenv

sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from exchanges.bybit import BybitExchange

load_dotenv()

logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –°–ø–∏—Å–æ–∫ —Å–∞–º—ã—Ö –ª–∏–∫–≤–∏–¥–Ω—ã—Ö –ø–∞—Ä –Ω–∞ Bybit (–æ–±—ã—á–Ω–æ –≤—Å–µ–≥–¥–∞ —Ä–∞–±–æ—Ç–∞—é—Ç)
LIQUID_SYMBOLS = [
    'BTCUSDT',  # Bitcoin - –≤—Å–µ–≥–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç
    'ETHUSDT',  # Ethereum - –≤—Å–µ–≥–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç
    'SOLUSDT',  # Solana - –ø–æ–ø—É–ª—è—Ä–Ω–∞—è
    'XRPUSDT',  # Ripple - —Å—Ç–∞–±–∏–ª—å–Ω–∞—è
    'DOGEUSDT',  # Dogecoin - –ø–æ–ø—É–ª—è—Ä–Ω–∞—è
    'ADAUSDT',  # Cardano - —Å—Ç–∞–±–∏–ª—å–Ω–∞—è
    'MATICUSDT',  # Polygon - –ø–æ–ø—É–ª—è—Ä–Ω–∞—è
    'LINKUSDT',  # Chainlink - —Å—Ç–∞–±–∏–ª—å–Ω–∞—è
    'DOTUSDT',  # Polkadot - —Å—Ç–∞–±–∏–ª—å–Ω–∞—è
    'UNIUSDT'  # Uniswap - –ø–æ–ø—É–ª—è—Ä–Ω–∞—è
]


class BybitTester:
    def __init__(self):
        self.exchange = None
        self.position_size_usd = float(os.getenv('TEST_POSITION_SIZE', '10'))  # –ú–∞–ª—ã–π —Ä–∞–∑–º–µ—Ä –¥–ª—è —Ç–µ—Å—Ç–∞
        self.leverage = int(os.getenv('TEST_LEVERAGE', '5'))  # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–ª–µ—á–æ
        self.sl_percent = float(os.getenv('TEST_SL_PERCENT', '2'))  # 2% SL
        self.test_results = []

    async def initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∏—Ä–∂–∏"""
        try:
            self.exchange = BybitExchange({
                'api_key': os.getenv('BYBIT_API_KEY'),
                'api_secret': os.getenv('BYBIT_API_SECRET'),
                'testnet': True  # –í—Å–µ–≥–¥–∞ testnet –¥–ª—è —ç—Ç–æ–≥–æ —Å–∫—Ä–∏–ø—Ç–∞
            })

            await self.exchange.initialize()

            balance = await self.exchange.get_balance()
            logger.info(f"‚úÖ Bybit testnet connected - Balance: ${balance:.2f}")

            if balance < 100:
                logger.warning(f"‚ö†Ô∏è Low balance: ${balance:.2f}. May not be enough for all tests.")

            return True

        except Exception as e:
            logger.error(f"Failed to initialize Bybit: {e}")
            return False

    async def check_symbol_info(self, symbol: str) -> Dict:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–∏–º–≤–æ–ª–µ"""
        result = {
            'symbol': symbol,
            'available': False,
            'status': None,
            'has_ticker': False,
            'price': 0,
            'min_qty': 0,
            'tick_size': 0,
            'error': None
        }

        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞—Ö
            if symbol in self.exchange.symbol_info:
                info = self.exchange.symbol_info[symbol]
                result['available'] = True
                result['status'] = info.get('status', 'Unknown')
                result['min_qty'] = info.get('minOrderQty', 0)
                result['tick_size'] = info.get('tickSize', 0)
            else:
                # –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å
                await self.exchange._load_single_symbol_info(symbol)
                if symbol in self.exchange.symbol_info:
                    info = self.exchange.symbol_info[symbol]
                    result['available'] = True
                    result['status'] = info.get('status', 'Unknown')
                    result['min_qty'] = info.get('minOrderQty', 0)
                    result['tick_size'] = info.get('tickSize', 0)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º ticker
            ticker = await self.exchange.get_ticker(symbol)
            if ticker and ticker.get('price', 0) > 0:
                result['has_ticker'] = True
                result['price'] = ticker['price']

        except Exception as e:
            result['error'] = str(e)

        return result

    async def test_create_position(self, symbol: str) -> Dict:
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏ —Å SL"""
        test_result = {
            'symbol': symbol,
            'success': False,
            'order_id': None,
            'price': 0,
            'quantity': 0,
            'sl_set': False,
            'sl_price': 0,
            'error': None,
            'steps': []
        }

        try:
            logger.info(f"\n{'=' * 50}")
            logger.info(f"üéØ Testing {symbol}")
            logger.info(f"{'=' * 50}")

            # –®–∞–≥ 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–º–≤–æ–ª–∞
            test_result['steps'].append("1. Checking symbol info...")
            symbol_info = await self.check_symbol_info(symbol)

            if not symbol_info['available']:
                test_result['error'] = f"Symbol not available"
                logger.error(f"‚ùå {symbol} not available")
                return test_result

            if not symbol_info['has_ticker']:
                test_result['error'] = f"No ticker data"
                logger.error(f"‚ùå {symbol} has no ticker")
                return test_result

            logger.info(f"‚úÖ Symbol check passed: price=${symbol_info['price']:.4f}, status={symbol_info['status']}")
            test_result['steps'].append(f"   ‚úÖ Price: ${symbol_info['price']:.4f}")

            # –®–∞–≥ 2: –£—Å—Ç–∞–Ω–æ–≤–∫–∞ leverage
            test_result['steps'].append("2. Setting leverage...")
            leverage_set = await self.exchange.set_leverage(symbol, self.leverage)
            if leverage_set:
                logger.info(f"‚úÖ Leverage set to {self.leverage}x")
                test_result['steps'].append(f"   ‚úÖ Leverage: {self.leverage}x")
            else:
                logger.warning(f"‚ö†Ô∏è Could not set leverage (may be already set)")
                test_result['steps'].append(f"   ‚ö†Ô∏è Leverage may be already set")

            # –®–∞–≥ 3: –†–∞—Å—á–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
            test_result['steps'].append("3. Calculating order size...")
            price = symbol_info['price']
            quantity = self.position_size_usd / price

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
            min_qty = symbol_info['min_qty']
            if quantity < min_qty:
                quantity = min_qty
                actual_size = quantity * price
                logger.info(f"üìä Adjusted to min quantity: {quantity} (${actual_size:.2f})")
            else:
                logger.info(f"üìä Quantity: {quantity:.6f} ${symbol}")

            test_result['steps'].append(f"   üìä Qty: {quantity:.6f}")

            # –®–∞–≥ 4: –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞
            test_result['steps'].append("4. Creating market order...")
            logger.info(f"üìù Creating BUY order: {quantity:.6f} {symbol} @ market")

            order = await self.exchange.create_market_order(symbol, 'BUY', quantity)

            if order and order.get('orderId'):
                test_result['success'] = True
                test_result['order_id'] = order['orderId']
                test_result['price'] = order.get('price', price)
                test_result['quantity'] = order.get('quantity', quantity)

                logger.info(f"‚úÖ Order created: {order['orderId']}")
                logger.info(f"   Executed: {test_result['quantity']:.6f} @ ${test_result['price']:.4f}")
                test_result['steps'].append(f"   ‚úÖ Order ID: {order['orderId']}")

                # –ñ–¥–µ–º –ø–æ–∫–∞ –ø–æ–∑–∏—Ü–∏—è –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç—Å—è
                await asyncio.sleep(3)

                # –®–∞–≥ 5: –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Stop Loss
                test_result['steps'].append("5. Setting Stop Loss...")
                sl_price = test_result['price'] * (1 - self.sl_percent / 100)
                logger.info(f"üõ°Ô∏è Setting SL at ${sl_price:.4f} (-{self.sl_percent}%)")

                sl_success = await self.exchange.set_stop_loss(symbol, sl_price)

                if sl_success:
                    test_result['sl_set'] = True
                    test_result['sl_price'] = sl_price
                    logger.info(f"‚úÖ Stop Loss set at ${sl_price:.4f}")
                    test_result['steps'].append(f"   ‚úÖ SL: ${sl_price:.4f}")
                else:
                    logger.warning(f"‚ö†Ô∏è Failed to set Stop Loss")
                    test_result['steps'].append(f"   ‚ùå SL failed")

            else:
                test_result['error'] = "Order creation failed"
                logger.error(f"‚ùå Failed to create order")
                test_result['steps'].append(f"   ‚ùå Order failed")

        except Exception as e:
            test_result['error'] = str(e)
            logger.error(f"‚ùå Error testing {symbol}: {e}")
            test_result['steps'].append(f"   ‚ùå Error: {str(e)[:100]}")

        return test_result

    async def close_all_positions(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ –≤—Å–µ—Ö –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π –ø–æ—Å–ª–µ —Ç–µ—Å—Ç–∞"""
        logger.info("\nüßπ Closing all test positions...")

        try:
            positions = await self.exchange.get_open_positions()

            if not positions:
                logger.info("No open positions to close")
                return

            for pos in positions:
                symbol = pos['symbol']
                logger.info(f"Closing {symbol}...")

                success = await self.exchange.close_position(symbol)
                if success:
                    logger.info(f"‚úÖ Closed {symbol}")
                else:
                    logger.warning(f"‚ö†Ô∏è Failed to close {symbol}")

                await asyncio.sleep(0.5)  # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–∫—Ä—ã—Ç–∏—è–º–∏

        except Exception as e:
            logger.error(f"Error closing positions: {e}")

    async def run_tests(self):
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
        logger.info("\n" + "=" * 60)
        logger.info("üöÄ STARTING BYBIT TESTNET VALIDATION")
        logger.info("=" * 60)
        logger.info(f"Position Size: ${self.position_size_usd}")
        logger.info(f"Leverage: {self.leverage}x")
        logger.info(f"Stop Loss: {self.sl_percent}%")
        logger.info(f"Symbols to test: {len(LIQUID_SYMBOLS)}")
        logger.info("=" * 60)

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
        if not await self.initialize():
            logger.error("Failed to initialize exchange")
            return

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞
        balance = await self.exchange.get_balance()
        required_balance = self.position_size_usd * len(LIQUID_SYMBOLS) * 1.5  # –° –∑–∞–ø–∞—Å–æ–º

        if balance < required_balance:
            logger.warning(f"‚ö†Ô∏è Balance ${balance:.2f} may be insufficient (need ~${required_balance:.2f})")

        # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞–∂–¥–æ–≥–æ —Å–∏–º–≤–æ–ª–∞
        successful = 0
        failed = 0

        for i, symbol in enumerate(LIQUID_SYMBOLS, 1):
            logger.info(f"\n[{i}/{len(LIQUID_SYMBOLS)}] Testing {symbol}...")

            result = await self.test_create_position(symbol)
            self.test_results.append(result)

            if result['success']:
                successful += 1
                logger.info(f"‚úÖ {symbol} test PASSED")
            else:
                failed += 1
                logger.error(f"‚ùå {symbol} test FAILED: {result['error']}")

            # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É —Ç–µ—Å—Ç–∞–º–∏
            await asyncio.sleep(2)

        # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        logger.info("\n" + "=" * 60)
        logger.info("üìä TEST RESULTS SUMMARY")
        logger.info("=" * 60)
        logger.info(f"Total tests: {len(LIQUID_SYMBOLS)}")
        logger.info(f"‚úÖ Successful: {successful}")
        logger.info(f"‚ùå Failed: {failed}")
        logger.info(f"Success rate: {(successful / len(LIQUID_SYMBOLS) * 100):.1f}%")

        # –î–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        logger.info("\nüìã DETAILED RESULTS:")
        for result in self.test_results:
            status = "‚úÖ" if result['success'] else "‚ùå"
            sl_status = "‚úÖ" if result['sl_set'] else "‚ùå"
            logger.info(f"{status} {result['symbol']}: Order={status}, SL={sl_status}")
            if result['error']:
                logger.info(f"   Error: {result['error']}")

        # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: –∑–∞–∫—Ä—ã—Ç—å –≤—Å–µ –ø–æ–∑–∏—Ü–∏–∏ –ø–æ—Å–ª–µ —Ç–µ—Å—Ç–∞
        logger.info("\n" + "=" * 60)
        close_positions = input("Close all test positions? (y/n): ").lower()
        if close_positions == 'y':
            await self.close_all_positions()

        # –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        if self.exchange:
            await self.exchange.close()

        logger.info("\n‚úÖ Test completed!")


async def main():
    tester = BybitTester()
    await tester.run_tests()


if __name__ == "__main__":
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è API –∫–ª—é—á–µ–π
    if not os.getenv('BYBIT_API_KEY'):
        logger.error("BYBIT_API_KEY not found in environment")
        sys.exit(1)

    asyncio.run(main())