version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: ats_postgres
    environment:
      POSTGRES_DB: ${DB_NAME:-fox_crypto}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./migrations:/docker-entrypoint-initdb.d:ro
    ports:
      - "5432:5432"
    networks:
      - ats_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # WebSocket Monitoring Daemon
  monitoring_daemon:
    build:
      context: .
      dockerfile: Dockerfile.monitoring
    container_name: ats_monitoring_daemon
    environment:
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=${DB_NAME:-fox_crypto}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - BINANCE_API_KEY=${BINANCE_API_KEY}
      - BINANCE_API_SECRET=${BINANCE_API_SECRET}
      - BINANCE_TESTNET=${BINANCE_TESTNET:-false}
      - BYBIT_API_KEY=${BYBIT_API_KEY}
      - BYBIT_API_SECRET=${BYBIT_API_SECRET}
      - BYBIT_TESTNET=${BYBIT_TESTNET:-true}
      - PYTHONUNBUFFERED=1
    command: python monitoring/websocket_daemon.py
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - ats_network
    restart: unless-stopped
    volumes:
      - ./logs:/app/logs
      - ./config:/app/config:ro

  # Web Interface
  web_interface:
    build:
      context: .
      dockerfile: Dockerfile.monitoring
    container_name: ats_web_interface
    environment:
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=${DB_NAME:-fox_crypto}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - PYTHONUNBUFFERED=1
    command: uvicorn monitoring.web_interface:app --host 0.0.0.0 --port 8000 --workers 4
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - ats_network
    restart: unless-stopped
    volumes:
      - ./monitoring/templates:/app/monitoring/templates:ro
      - ./logs:/app/logs

  # Nginx Reverse Proxy (optional, for production)
  nginx:
    image: nginx:alpine
    container_name: ats_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - web_interface
    networks:
      - ats_network
    restart: unless-stopped
    profiles:
      - production

  # PgAdmin for database management (optional)
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: ats_pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_EMAIL:-admin@ats.local}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_PASSWORD:-admin}
    ports:
      - "5050:80"
    networks:
      - ats_network
    restart: unless-stopped
    profiles:
      - dev

volumes:
  postgres_data:
    driver: local

networks:
  ats_network:
    driver: bridge