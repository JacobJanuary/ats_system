#!/usr/bin/env python3
"""
Protection Monitor - PRODUCTION READY v2.7 (FIXED)
- –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ _is_protection_incomplete
- –ò—Å–ø—Ä–∞–≤–ª–µ–Ω –≤—ã–∑–æ–≤ _calculate_position_age
- –£–ª—É—á—à–µ–Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –º–µ—Ç–æ–∫ –ø–æ–∑–∏—Ü–∏–π
"""

import asyncio
import logging
import os
import sys
from datetime import datetime, timezone, timedelta
from typing import Dict, List, Optional
from dotenv import load_dotenv

sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from exchanges.binance import BinanceExchange
from exchanges.bybit import BybitExchange
from utils.rate_limiter import RateLimiter

load_dotenv()

logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - [%(name)s] %(message)s',
    handlers=[
        logging.FileHandler('protection.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)


class ProtectionMonitor:
    def __init__(self):
        self.stop_loss_type = os.getenv('STOP_LOSS_TYPE', 'fixed').lower()
        self.sl_percent = float(os.getenv('STOP_LOSS_PERCENT', '2'))
        self.tp_percent = float(os.getenv('TAKE_PROFIT_PERCENT', '3'))
        self.trailing_activation = float(os.getenv('TRAILING_ACTIVATION_PERCENT', '3.5'))
        self.trailing_callback = float(os.getenv('TRAILING_CALLBACK_RATE', '0.5'))
        self.check_interval = int(os.getenv('CHECK_INTERVAL', '30'))
        self.max_position_duration_hours = int(os.getenv('MAX_POSITION_DURATION_HOURS', '0'))
        self.taker_fee_percent = float(os.getenv('TAKER_FEE_PERCENT', '0.06'))
        self.testnet = os.getenv('TESTNET', 'false').lower() == 'true'

        self.binance: Optional[BinanceExchange] = None
        self.bybit: Optional[BybitExchange] = None

        self.stats = {
            'checks': 0, 'positions_protected': 0, 'positions_closed': 0,
            'errors': 0, 'start_time': datetime.now(timezone.utc)
        }

        # –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –±–∏—Ä–∂–∞–º
        self.exchange_stats = {
            'Binance': {
                'positions_found': 0,
                'positions_open': 0,
                'positions_protected': 0,
                'positions_expired': 0,
                'positions_with_breakeven': 0,
                'positions_with_errors': 0,
                'ts_sl_applied': 0,
                'fixed_sl_applied': 0,
                'tp_applied': 0,
                'protection_complete': 0,
                'protection_incomplete': 0,
                'rate_limit_errors': 0,
                'api_errors': 0,
                'last_cycle_time': None
            },
            'Bybit': {
                'positions_found': 0,
                'positions_open': 0,
                'positions_protected': 0,
                'positions_expired': 0,
                'positions_with_breakeven': 0,
                'positions_with_errors': 0,
                'ts_sl_applied': 0,
                'fixed_sl_applied': 0,
                'tp_applied': 0,
                'protection_complete': 0,
                'protection_incomplete': 0,
                'rate_limit_errors': 0,
                'api_errors': 0,
                'last_cycle_time': None
            }
        }

        # –ú–û–ù–ò–¢–û–†–ò–ù–ì –û–®–ò–ë–û–ö –ò –ê–õ–ï–†–¢–´
        self.error_monitor = {
            'symbol_errors': {},  # symbol -> error_count
            'error_patterns': {},  # error_pattern -> count
            'alert_thresholds': {
                'symbol_error_threshold': 10,  # –ê–ª–µ—Ä—Ç –µ—Å–ª–∏ —Å–∏–º–≤–æ–ª –∏–º–µ–µ—Ç >10 –æ—à–∏–±–æ–∫
                'pattern_error_threshold': 50,  # –ê–ª–µ—Ä—Ç –µ—Å–ª–∏ –ø–∞—Ç—Ç–µ—Ä–Ω –∏–º–µ–µ—Ç >50 –æ—à–∏–±–æ–∫
                'api_error_rate_threshold': 5.0  # –ê–ª–µ—Ä—Ç –µ—Å–ª–∏ >5% API –æ—à–∏–±–æ–∫
            },
            'alerts_sent': set(),  # –ß—Ç–æ–±—ã –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ –∞–ª–µ—Ä—Ç—ã
            'last_alert_time': None
        }

        self.binance_semaphore = asyncio.Semaphore(10)
        self.bybit_semaphore = asyncio.Semaphore(5)

        # Rate limiter –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –±–∞–Ω–æ–≤ –Ω–∞ –±–∏—Ä–∂–∞—Ö
        self.rate_limiter = RateLimiter()

        # –ö—ç—à —Å–æ—Å—Ç–æ—è–Ω–∏–π –∑–∞—â–∏—Ç—ã –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫
        self.protection_cache = {}
        self.cache_ttl = 300  # 5 –º–∏–Ω—É—Ç TTL –∫—ç—à–∞

        self._log_configuration()

    def _is_cache_valid(self, cache_key: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç–∏ –∫—ç—à–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π –∑–∞—â–∏—Ç—ã"""
        if cache_key not in self.protection_cache:
            return False

        cache_time, _ = self.protection_cache[cache_key]
        age_seconds = (datetime.now(timezone.utc) - cache_time).total_seconds()
        return age_seconds < self.cache_ttl

    def _update_cache(self, cache_key: str, has_protection: bool):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—ç—à–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π –∑–∞—â–∏—Ç—ã"""
        self.protection_cache[cache_key] = (datetime.now(timezone.utc), has_protection)

    def _round_price_to_tick_size(self, price: float, tick_size: float) -> float:
        """–û–∫—Ä—É–≥–ª—è–µ—Ç —Ü–µ–Ω—É –¥–æ –±–ª–∏–∂–∞–π—à–µ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è tick_size –¥–ª—è —Ç–æ—á–Ω–æ—Å—Ç–∏ –±–∏—Ä–∂–∏"""
        if tick_size <= 0:
            return price
        try:
            # –û–∫—Ä—É–≥–ª—è–µ–º –¥–æ –±–ª–∏–∂–∞–π—à–µ–≥–æ –∫—Ä–∞—Ç–Ω–æ–≥–æ tick_size
            rounded = round(price / tick_size) * tick_size
            # –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–µ –º–µ–Ω—å—à–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ tick_size
            return max(rounded, tick_size)
        except (ZeroDivisionError, OverflowError):
            logger.warning(f"Invalid tick_size {tick_size} for price {price}, using original price")
            return price

    def _get_tick_size(self, exchange: BinanceExchange | BybitExchange, symbol: str) -> float:
        """–ü–æ–ª—É—á–∞–µ—Ç tick_size –¥–ª—è —Å–∏–º–≤–æ–ª–∞ —Å fallback –∑–Ω–∞—á–µ–Ω–∏—è–º–∏"""
        try:
            if isinstance(exchange, BinanceExchange):
                return float(exchange.symbol_info.get(symbol, {}).get('priceFilter', {}).get('tickSize', 0.0001))
            else:  # BybitExchange
                return float(exchange.symbol_info.get(symbol, {}).get('tick_size', 0.0001))
        except (KeyError, TypeError, ValueError):
            logger.debug(f"Could not get tick_size for {symbol}, using default 0.0001")
            return 0.0001

    def _log_configuration(self):
        logger.info("=" * 60)
        logger.info("Protection Monitor Configuration")
        logger.info("=" * 60)
        logger.info(f"Mode: {'TESTNET' if self.testnet else 'PRODUCTION'}")
        logger.info(f"Stop Loss Type: {self.stop_loss_type.upper()}")
        logger.info(f"Stop Loss: {self.sl_percent}%")
        logger.info(f"Take Profit: {self.tp_percent}%")
        if self.stop_loss_type == 'trailing':
            logger.info(f"Trailing Activation: {self.trailing_activation}%")
            logger.info(f"Trailing Callback: {self.trailing_callback}%")
        if self.max_position_duration_hours > 0:
            logger.info(f"Max Position Duration: {self.max_position_duration_hours} hours")
            logger.info(f"Taker Fee: {self.taker_fee_percent}%")
        logger.info(f"Check Interval: {self.check_interval} seconds")
        logger.info("=" * 60)

    def _calculate_breakeven_price(self, entry_price: float, side: str,
                                   exchange: Optional[BinanceExchange | BybitExchange] = None,
                                   symbol: str = "") -> float:
        """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Ü–µ–Ω—É –±–µ–∑—É–±—ã—Ç–∫–∞ —Å —É—á–µ—Ç–æ–º –∫–æ–º–∏—Å—Å–∏–π –∏ —Ç–æ—á–Ω–æ—Å—Ç–∏ –±–∏—Ä–∂–∏"""
        try:
            fee_multiplier = self.taker_fee_percent / 100
            if side.upper() in ['LONG', 'BUY']:
                breakeven_price = entry_price * (1 + 2 * fee_multiplier)
            else:
                breakeven_price = entry_price * (1 - 2 * fee_multiplier)

            # –û–∫—Ä—É–≥–ª—è–µ–º –¥–æ tick_size –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω exchange –∏ symbol
            if exchange and symbol:
                tick_size = self._get_tick_size(exchange, symbol)
                breakeven_price = self._round_price_to_tick_size(breakeven_price, tick_size)
                logger.info(f"üí∞ Breakeven: {symbol} | Price: ${breakeven_price:.6f} | Tick Size: {tick_size}")

            return breakeven_price
        except Exception as e:
            logger.error(f"Error calculating breakeven price: {e}")
            return entry_price

    # –ò–°–ü–†–ê–í–õ–ï–ù–û: –î–æ–±–∞–≤–ª–µ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ —Ä–∞—Å—á–µ—Ç–∞ –≤–æ–∑—Ä–∞—Å—Ç–∞ –ø–æ–∑–∏—Ü–∏–∏
    def _calculate_position_age(self, position: Dict, exchange_name: str) -> float:
        """Calculate position age in hours - FIXED VERSION"""
        try:
            # –î–ª—è Binance –∏—Å–ø–æ–ª—å–∑—É–µ–º updateTime
            if exchange_name == "Binance":
                timestamp = position.get("updateTime", 0)
            else:  # Bybit –∏—Å–ø–æ–ª—å–∑—É–µ—Ç updatedTime
                timestamp = position.get("updatedTime", 0)

            if not timestamp:
                logger.debug(f"No timestamp found for position, returning 0 age")
                return 0.0

            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥—ã –≤ —Å–µ–∫—É–Ω–¥—ã –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            if timestamp > 1e10:  # –ï—Å–ª–∏ timestamp –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
                timestamp = timestamp / 1000

            current_time = datetime.now(timezone.utc).timestamp()
            age_seconds = current_time - timestamp
            age_hours = age_seconds / 3600  # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —á–∞—Å—ã

            logger.debug(f"Position age calculated: {age_hours:.2f} hours")
            return max(0.0, age_hours)  # –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º –Ω–µ–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ

        except Exception as e:
            logger.warning(f"Error calculating position age: {e}")
            return 0.0  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤–æ–∑–≤—Ä–∞—â–∞–µ–º 0 –µ—Å–ª–∏ —Ä–∞—Å—á–µ—Ç –Ω–µ —É–¥–∞–ª—Å—è

    async def initialize(self):
        try:
            if os.getenv('BINANCE_API_KEY'):
                self.binance = BinanceExchange(
                    {'api_key': os.getenv('BINANCE_API_KEY'), 'api_secret': os.getenv('BINANCE_API_SECRET'),
                     'testnet': self.testnet})
                await self.binance.initialize()
                logger.info(f"‚úÖ Binance connected - Balance: ${await self.binance.get_balance():.2f}")

            if os.getenv('BYBIT_API_KEY'):
                self.bybit = BybitExchange(
                    {'api_key': os.getenv('BYBIT_API_KEY'), 'api_secret': os.getenv('BYBIT_API_SECRET'),
                     'testnet': self.testnet})
                await self.bybit.initialize()
                logger.info(f"‚úÖ Bybit connected - Balance: ${await self.bybit.get_balance():.2f}")

            if not self.binance and not self.bybit:
                raise Exception("No exchanges configured!")
        except Exception as e:
            logger.error(f"Initialization failed: {e}", exc_info=True)
            raise

    # –ò–°–ü–†–ê–í–õ–ï–ù–û: –î–æ–±–∞–≤–ª–µ–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π symbol
    async def _is_protection_incomplete(self, exchange_name: str, pos: Dict, open_orders: List[Dict]) -> bool:
        """Check if position protection is incomplete - FIXED VERSION"""

        # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –î–æ–±–∞–≤–ª–µ–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π symbol
        symbol = pos.get('symbol')
        cache_key = f"{exchange_name}_{symbol}_protection"

        logger.debug(f"üîç Checking protection status for {exchange_name} {symbol}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
        if self._is_cache_valid(cache_key):
            _, has_protection = self.protection_cache[cache_key]
            return not has_protection

        # –§–∏–ª—å—Ç—Ä—É–µ–º –æ—Ä–¥–µ—Ä–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –¥–∞–Ω–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏
        symbol_orders = [o for o in open_orders if o.get('symbol') == symbol]

        has_sl = False
        has_tp = False
        has_ts = False

        try:
            if exchange_name == 'Bybit':
                # –î–ª—è Bybit: –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ –æ—Ä–¥–µ—Ä–∞ (–±–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω–æ —á–µ–º –ø–æ–ª—è –ø–æ–∑–∏—Ü–∏–∏)
                has_sl = any(
                    o.get('type', '').upper() in ['STOP', 'STOP_MARKET', 'STOP_LOSS'] or
                    'stop' in o.get('type', '').lower()
                    for o in symbol_orders
                )
                has_tp = any(
                    o.get('type', '').upper() in ['TAKE_PROFIT', 'TAKE_PROFIT_MARKET'] or
                    'take_profit' in o.get('type', '').lower()
                    for o in symbol_orders
                )
                has_ts = any(
                    'trailing' in o.get('type', '').lower() or
                    'trail' in o.get('type', '').lower()
                    for o in symbol_orders
                )

                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ position fields –µ—Å–ª–∏ –æ—Ä–¥–µ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã
                if not any([has_sl, has_tp, has_ts]):
                    has_sl = pos.get('stopLoss') and str(pos.get('stopLoss')) not in ['', '0', 'null', None]
                    has_tp = pos.get('takeProfit') and str(pos.get('takeProfit')) not in ['', '0', 'null', None]
                    has_ts = pos.get('trailingStop') and str(pos.get('trailingStop')) not in ['', '0', 'null', None]

            else:  # Binance
                # –î–ª—è Binance –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø—ã –æ—Ä–¥–µ—Ä–æ–≤ (–±–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω–æ)
                has_sl = any(
                    o.get('type', '').upper() in ['STOP_MARKET', 'STOP_LOSS', 'STOP_LOSS_LIMIT'] or
                    o.get('type', '').lower() == 'stop'
                    for o in symbol_orders
                )
                has_tp = any(
                    o.get('type', '').upper() in ['TAKE_PROFIT_MARKET', 'TAKE_PROFIT_LIMIT'] or
                    'take_profit' in o.get('type', '').lower()
                    for o in symbol_orders
                )
                has_ts = any(
                    o.get('type', '').upper() == 'TRAILING_STOP_MARKET' or
                    'trailing' in o.get('type', '').lower()
                    for o in symbol_orders
                )

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω—É–∂–Ω–∞ –ª–∏ –∑–∞—â–∏—Ç–∞
            if self.stop_loss_type == 'trailing':
                protection_complete = has_ts and has_sl
                protection_needed = not protection_complete
            else:  # fixed
                protection_complete = has_sl and has_tp
                protection_needed = not protection_complete

            # –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏
            if protection_complete:
                logger.debug(
                    f"‚úÖ Protection complete for {exchange_name} {symbol}: SL={has_sl}, TP={has_tp}, TS={has_ts}")
            else:
                logger.info(
                    f"üõ°Ô∏è Protection incomplete for {exchange_name} {symbol}: SL={has_sl}, TP={has_tp}, TS={has_ts}")

            # –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à
            self._update_cache(cache_key, protection_complete)

            return protection_needed

        except Exception as e:
            logger.error(f"Error checking protection for {exchange_name} {symbol}: {e}")
            # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ —Å—á–∏—Ç–∞–µ–º —á—Ç–æ –∑–∞—â–∏—Ç–∞ –Ω—É–∂–Ω–∞
            return True

    async def _apply_protection(self, exchange_name: str, exchange: BinanceExchange | BybitExchange, pos: Dict):
        """–ü—Ä–∏–º–µ–Ω—è–µ—Ç –∑–∞—â–∏—Ç—É –∫ –ø–æ–∑–∏—Ü–∏–∏ —Å –ø–æ–ª–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π"""
        symbol = pos['symbol']
        logger.warning(f"‚ö†Ô∏è {exchange_name} {symbol} protection is incomplete. Applying now.")

        try:
            if self.stop_loss_type == 'trailing':
                # –£–ú–ù–ê–Ø –æ—Ç–º–µ–Ω–∞ –æ—Ä–¥–µ—Ä–æ–≤: —Å–æ—Ö—Ä–∞–Ω—è–µ–º close-–æ—Ä–¥–µ—Ä–∞, –æ—Ç–º–µ–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –∑–∞—â–∏—Ç—É
                close_order = await self._cancel_existing_protection_orders(exchange, symbol)
                await asyncio.sleep(0.5)

                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º trailing stop
                ts_success = await self._set_trailing_stop(exchange, pos)
                if ts_success:
                    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º backup stop loss
                    sl_success = await self._set_backup_sl(exchange, pos)
                    if sl_success:
                        logger.info(f"‚úÖ Fully protected {exchange_name} position with TS+SL: {symbol}")
                        self.stats['positions_protected'] += 1
                    else:
                        logger.error(f"‚ùå Failed to set backup SL for {exchange_name} {symbol}")
                else:
                    logger.error(f"‚ùå Failed to set trailing stop for {exchange_name} {symbol}")
            else:  # fixed
                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º fixed stop loss
                sl_success = await self._set_fixed_sl(exchange, pos)
                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º take profit
                tp_success = await self._set_fixed_tp(exchange, pos)

                if sl_success and tp_success:
                    logger.info(f"‚úÖ Protected {exchange_name} position with SL+TP: {symbol}")
                    self.stats['positions_protected'] += 1
                else:
                    logger.warning(f"‚ö†Ô∏è Partial protection applied for {exchange_name} {symbol}")

        except Exception as e:
            logger.error(f"Error applying protection to {exchange_name} {symbol}: {e}", exc_info=True)
            self.stats['errors'] += 1

    async def _process_single_position(self, exchange_name: str, pos: Dict, orders_by_symbol: Dict[str, List[Dict]]):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–¥–µ–ª—å–Ω—É—é –ø–æ–∑–∏—Ü–∏—é —Å –ø–æ–ª–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π –∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
        exchange = self.binance if exchange_name == 'Binance' else self.bybit
        symbol = pos['symbol']

        # –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–û–ï –õ–û–ì–ò–†–û–í–ê–ù–ò–ï –î–õ–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò
        logger.info(f"üìä POSITION ANALYSIS: {exchange_name} {symbol}")
        side = pos.get('side', 'UNKNOWN')
        entry_price = pos.get('entry_price', 0)
        quantity = pos.get('quantity', pos.get('size', 0))

        logger.info(f"   Direction: {side}")
        logger.info(f"   Entry Price: ${entry_price:.6f}")
        logger.info(f"   Quantity: {quantity}")
        logger.info(f"   Position Value: ${entry_price * abs(quantity):.2f}")

        try:
            logger.debug(f"üîç Processing {exchange_name} {symbol} position")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–µ–≤—ã—à–µ–Ω–∏–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø–æ–∑–∏—Ü–∏–∏
            if self.max_position_duration_hours > 0:
                # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤—ã–∑–æ–≤ _calculate_position_age
                age_hours = self._calculate_position_age(pos, exchange_name)

                if age_hours > self.max_position_duration_hours:
                    logger.warning(
                        f"‚è∞ {exchange_name} {symbol} exceeded max duration: {age_hours:.1f}h > {self.max_position_duration_hours}h")
                    await self._handle_expired_position(exchange, pos, orders_by_symbol.get(symbol, []), age_hours)
                    self.exchange_stats[exchange_name]['positions_expired'] += 1
                    return
                else:
                    logger.debug(f"   {symbol} age: {age_hours:.1f}h (limit: {self.max_position_duration_hours}h)")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞—â–∏—Ç—É –ø–æ–∑–∏—Ü–∏–∏
            protection_is_incomplete = await self._is_protection_incomplete(exchange_name, pos,
                                                                            orders_by_symbol.get(symbol, []))

            if protection_is_incomplete:
                logger.info(f"üõ°Ô∏è Protection incomplete for {exchange_name} {symbol}, applying protection...")
                await self._apply_protection(exchange_name, exchange, pos)
                self.exchange_stats[exchange_name]['protection_incomplete'] += 1
            else:
                logger.debug(f"‚úÖ Protection complete for {exchange_name} {symbol}")
                self.exchange_stats[exchange_name]['protection_complete'] += 1

        except Exception as e:
            logger.error(f"‚ùå CRITICAL ERROR in protect_positions for {exchange_name}: {e}", exc_info=True)
            # –°–¢–ê–¢–ò–°–¢–ò–ö–ê: –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ API –æ—à–∏–±–æ–∫
            self.exchange_stats[exchange_name]['api_errors'] += 1

        # –õ–æ–≥–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        self._log_exchange_statistics(exchange_name)

    def _log_exchange_statistics(self, exchange_name: str):
        """–õ–æ–≥–∏—Ä—É–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –±–∏—Ä–∂–µ"""

        stats = self.exchange_stats[exchange_name]

        logger.info(f"üìä {exchange_name.upper()} STATISTICS REPORT")
        logger.info(f"   üìà Positions Found: {stats['positions_found']}")
        logger.info(f"   üîÑ Positions Open: {stats['positions_open']}")
        logger.info(f"   ‚úÖ Positions Protected: {stats['positions_protected']}")
        logger.info(f"   ‚è∞ Positions Expired: {stats['positions_expired']}")
        logger.info(f"   üí∞ Positions with Breakeven: {stats['positions_with_breakeven']}")
        logger.info(f"   ‚ùå Positions with Errors: {stats['positions_with_errors']}")
        logger.info(f"   üéØ TS/SL Applied: {stats['ts_sl_applied']}")
        logger.info(f"   üõ°Ô∏è Fixed SL Applied: {stats['fixed_sl_applied']}")
        logger.info(f"   üíπ TP Applied: {stats['tp_applied']}")
        logger.info(f"   ‚úÖ Protection Complete: {stats['protection_complete']}")
        logger.info(f"   üõ†Ô∏è Protection Incomplete: {stats['protection_incomplete']}")
        logger.info(f"   üö¶ Rate Limit Errors: {stats['rate_limit_errors']}")
        logger.info(f"   üìå API Errors: {stats['api_errors']}")

        if stats['last_cycle_time']:
            logger.info(f"   üïí Last Cycle: {stats['last_cycle_time'].strftime('%H:%M:%S UTC')}")

        # –†–∞—Å—á–µ—Ç–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        total_processed = stats['protection_complete'] + stats['protection_incomplete']
        if total_processed > 0:
            success_rate = (stats['protection_complete'] / total_processed) * 100
            logger.info(f"   üìä Success Rate: {success_rate:.1f}%")

        if stats['positions_found'] > 0:
            error_rate = (stats['positions_with_errors'] / stats['positions_found']) * 100
            logger.info(f"   ‚ö†Ô∏è Error Rate: {error_rate:.1f}%")

    def _log_comprehensive_statistics(self):
        """–õ–æ–≥–∏—Ä—É–µ—Ç –ø–æ–ª–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –≤—Å–µ–º –±–∏—Ä–∂–∞–º"""

        logger.info("=" * 80)
        logger.info("üéØ PROTECTION MONITOR COMPREHENSIVE STATISTICS")
        logger.info("=" * 80)

        total_positions = 0
        total_protected = 0
        total_expired = 0
        total_errors = 0

        for exchange_name in ['Binance', 'Bybit']:
            stats = self.exchange_stats[exchange_name]
            self._log_exchange_statistics(exchange_name)

            total_positions += stats['positions_found']
            total_protected += stats['positions_protected']
            total_expired += stats['positions_expired']
            total_errors += stats['positions_with_errors']

            logger.info("")  # –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –º–µ–∂–¥—É –±–∏—Ä–∂–∞–º–∏

        # –ò—Ç–æ–≥–æ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        logger.info("üéâ OVERALL SUMMARY:")
        logger.info(f"   üìä Total Positions Processed: {total_positions}")
        logger.info(f"   ‚úÖ Total Positions Protected: {total_protected}")
        logger.info(f"   ‚è∞ Total Positions Expired: {total_expired}")
        logger.info(f"   ‚ùå Total Positions with Errors: {total_errors}")

        if total_positions > 0:
            protection_rate = (total_protected / total_positions) * 100
            error_rate = (total_errors / total_positions) * 100

            logger.info(f"   üìà Protection Success Rate: {protection_rate:.1f}%")
            logger.info(f"   ‚ö†Ô∏è Overall Error Rate: {error_rate:.1f}%")

        logger.info("=" * 80)

    async def _set_trailing_stop(self, exchange: BinanceExchange | BybitExchange, pos: Dict) -> bool:
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç trailing stop —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –ª–æ–≥–∏–∫–æ–π"""
        try:
            symbol, side, entry_price = pos['symbol'], pos['side'].upper(), pos['entry_price']

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º rate limit –ø–µ—Ä–µ–¥ –ø–æ–ª—É—á–µ–Ω–∏–µ–º —Ç–∏–∫–µ—Ä–∞
            exchange_key = 'binance' if isinstance(exchange, BinanceExchange) else 'bybit'
            if not await self.rate_limiter.acquire(exchange_key, 'query', f'get_ticker_trailing_{symbol}'):
                logger.warning(f"Rate limit exceeded for {exchange_key} get_ticker_trailing_{symbol}")
                return False

            ticker = await exchange.get_ticker(symbol)
            await self.rate_limiter.record_request(exchange_key, 'query', f'get_ticker_trailing_{symbol}')
            current_price = ticker.get('price', entry_price)

            # –†–∞—Å—á–µ—Ç —Ü–µ–Ω—ã –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Å —É—á–µ—Ç–æ–º —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã
            activation_price = max(entry_price * (1 + self.trailing_activation / 100), current_price * 1.01) if side in [
                'LONG', 'BUY'] else min(entry_price * (1 - self.trailing_activation / 100), current_price * 0.99)

            # –û–∫—Ä—É–≥–ª—è–µ–º –¥–æ tick_size –¥–ª—è —Ç–æ—á–Ω–æ—Å—Ç–∏ –±–∏—Ä–∂–∏
            tick_size = self._get_tick_size(exchange, symbol)
            activation_price = self._round_price_to_tick_size(activation_price, tick_size)

            # –£–õ–£–ß–®–ï–ù–ù–û–ï –õ–û–ì–ò–†–û–í–ê–ù–ò–ï (INFO —É—Ä–æ–≤–µ–Ω—å –¥–ª—è –≤–∏–¥–∏–º–æ—Å—Ç–∏ –≤ production)
            logger.info(f"üéØ TS Activation: {symbol} | Price: ${activation_price:.6f} | Tick Size: {tick_size}")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º rate limit –ø–µ—Ä–µ–¥ —É—Å—Ç–∞–Ω–æ–≤–∫–æ–π trailing stop
            if not await self.rate_limiter.acquire(exchange_key, 'order', f'set_trailing_stop_{symbol}'):
                logger.warning(f"Rate limit exceeded for {exchange_key} set_trailing_stop_{symbol}")
                return False

            position_cancel_result = await exchange.cancel_position_trading_stops(symbol)
            success = await exchange.set_trailing_stop(symbol, activation_price, self.trailing_callback)
            await self.rate_limiter.record_request(exchange_key, 'order', f'set_trailing_stop_{symbol}')
            if success:
                logger.info(f"‚úÖ Trailing Stop set for {symbol}: activation=${activation_price:.4f}, callback={self.trailing_callback}%")
                # –°–¢–ê–¢–ò–°–¢–ò–ö–ê: –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ TS
                exchange_name = 'Binance' if isinstance(exchange, BinanceExchange) else 'Bybit'
                self.exchange_stats[exchange_name]['ts_sl_applied'] += 1
                return True
            else:
                logger.error(f"‚ùå Failed to set Trailing Stop for {symbol}")
                return False
        except Exception as e:
            logger.error(f"Error setting TS for {pos['symbol']}: {e}")
            return False

    async def _handle_expired_position(self, exchange: BinanceExchange | BybitExchange, position: Dict,
                                     open_orders: List[Dict], age_hours: float):
        pnl = position.get('pnl', 0)
        exchange_name = exchange.__class__.__name__

        # ‚úÖ FIX: Extract symbol and side from position data
        symbol = position['symbol']
        side = position['side'].upper()

        logger.warning(f"‚è∞ {exchange_name} {symbol} EXPIRED: {age_hours:.1f}h old, closing position")

        try:
            # üî¥ –ö–†–ò–¢–ò–ß–ù–û: –û–¢–ú–ï–ù–Ø–ï–ú –í–°–ï –°–£–©–ï–°–¢–í–£–Æ–©–ò–ï –ó–ê–©–ò–¢–ù–´–ï –û–†–î–ï–†–ê –ü–ï–†–ï–î –ó–ê–ö–†–´–¢–ò–ï–ú
            logger.info(f"üóëÔ∏è Cancelling position-level trading stops for expired {symbol} before closing")

            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –æ—Ç–∫—Ä—ã—Ç—ã–µ –æ—Ä–¥–µ—Ä–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            exchange_key = 'binance' if isinstance(exchange, BinanceExchange) else 'bybit'
            if not await self.rate_limiter.acquire(exchange_key, 'query', f'get_orders_expired_{symbol}'):
                logger.warning(f"Rate limit exceeded for {exchange_key} get_orders_expired_{symbol}")
                return

            # –û—Ç–º–µ–Ω—è–µ–º –≤—Å–µ –æ—Ç–∫—Ä—ã—Ç—ã–µ –æ—Ä–¥–µ—Ä–∞ –¥–ª—è —ç—Ç–æ–≥–æ —Å–∏–º–≤–æ–ª–∞
            cancel_result = await self._cancel_existing_protection_orders(exchange, symbol)
            if cancel_result:
                logger.info(f"‚úÖ Successfully cancelled protection orders for {symbol}")


            # üî¥ –ö–†–ò–¢–ò–ß–ù–´–ô –§–ò–ö–°: –î–ª—è Bybit —Ç–∞–∫–∂–µ –æ—Ç–º–µ–Ω—è–µ–º position-level TL/SL
            if isinstance(exchange, BybitExchange):
                logger.info(f"üóëÔ∏è Cancelling position-level trading stops for expired {symbol}")
                position_cancel_result = await exchange.cancel_position_trading_stops(symbol)
                if position_cancel_result:
                    logger.info(f"‚úÖ Successfully cancelled position-level trading stops for {symbol}")
                else:
                    logger.warning(f"‚ö†Ô∏è Failed to cancel position-level trading stops for {symbol}")
            # üîç –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê: —É–±–µ–¥–∏–º—Å—è —á—Ç–æ –æ—Ä–¥–µ—Ä–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω—ã
                await asyncio.sleep(1)  # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏

                # –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ä–¥–µ—Ä–æ–≤ –ø–æ—Å–ª–µ –æ—Ç–º–µ–Ω—ã
                if not await self.rate_limiter.acquire(exchange_key, 'query', f'verify_cancel_{symbol}'):
                    logger.warning(f"Rate limit exceeded for {exchange_key} verify_cancel_{symbol}")
                else:
                    verification_orders = await exchange.get_open_orders(symbol)
                    await self.rate_limiter.record_request(exchange_key, 'query', f'verify_cancel_{symbol}')

                    verification_protection_count = 0
                    for order in verification_orders:
                        if order.get('symbol') == symbol:
                            order_type = order.get('type', '').upper()
                            is_reduce_only = False

                            if isinstance(exchange, BinanceExchange):
                                is_reduce_only = order.get('reduceOnly', False)
                            else:  # Bybit - –£–õ–£–ß–®–ï–ù–ù–ê–Ø –õ–û–ì–ò–ö–ê –í–ï–†–ò–§–ò–ö–ê–¶–ò–ò
                                # –î–ª—è Bybit –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —É—Å–ª–æ–≤–∏–π
                                order_type_lower = order.get('type', '').lower()
                                is_reduce_only = (
                                    'reduce' in order_type_lower or
                                    order.get('reduceOnly', False) or
                                    # –Ø–í–ù–û –ø—Ä–æ–≤–µ—Ä—è–µ–º SL –æ—Ä–¥–µ—Ä–∞ –Ω–∞ Bybit
                                    order_type_lower in ['stop_loss', 'stop_market', 'stop_limit'] or
                                    'stop' in order_type_lower or
                                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–º –ø–æ–ª—è–º Bybit
                                    order.get('stopOrderType', '') in ['StopLoss', 'Stop'] or
                                    order.get('orderType', '') in ['StopLoss', 'Stop']
                                )

                            if not is_reduce_only:
                                verification_protection_count += 1

                    if verification_protection_count == 0:
                        logger.info(f"‚úÖ VERIFIED: All protection orders cancelled for {symbol}")
                    else:
                        logger.warning(f"‚ö†Ô∏è VERIFICATION: Still {verification_protection_count} protection orders for {symbol}")

            else:
                logger.warning(f"‚ö†Ô∏è No protection orders found to cancel for {symbol}")

            # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –ø–æ—Å–ª–µ –æ—Ç–º–µ–Ω—ã –æ—Ä–¥–µ—Ä–æ–≤
            await asyncio.sleep(0.5)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –æ—Ä–¥–µ—Ä –Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏–µ
            breakeven_price = self._calculate_breakeven_price(position['entry_price'], side, exchange, symbol)

            # –ü–æ–ª—É—á–∞–µ–º tick_size –¥–ª—è –æ–∫—Ä—É–≥–ª–µ–Ω–∏—è —Ü–µ–Ω—ã
            if isinstance(exchange, BinanceExchange):
                tick_size = float(exchange.symbol_info.get(symbol, {}).get('priceFilter', {}).get('tickSize', 0.0001))
            else:  # BybitExchange
                tick_size = float(exchange.symbol_info.get(symbol, {}).get('tick_size', 0.0001))

            # –û–∫—Ä—É–≥–ª—è–µ–º —Ü–µ–Ω—É breakeven –¥–æ –±–ª–∏–∂–∞–π—à–µ–≥–æ tick_size
            breakeven_price = round(breakeven_price / tick_size) * tick_size

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ close-–æ—Ä–¥–µ—Ä–∞
            existing_close_order = self._find_existing_close_order(exchange, symbol, breakeven_price, tick_size, open_orders)

            if existing_close_order:
                logger.info(f"‚úÖ Close order already exists for {symbol} at ${breakeven_price:.6f}")
                return

            # –°–æ–∑–¥–∞–µ–º –ª–∏–º–∏—Ç–Ω—ã–π –æ—Ä–¥–µ—Ä –Ω–∞ breakeven –±–µ–∑ –æ—Ç–º–µ–Ω—ã —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∑–∞—â–∏—Ç—ã
            logger.info(f"üìù Creating breakeven limit order for {symbol} at ${breakeven_price:.6f}")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º rate limit –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º –æ—Ä–¥–µ—Ä–∞
            exchange_key = 'binance' if isinstance(exchange, BinanceExchange) else 'bybit'
            if not await self.rate_limiter.acquire(exchange_key, 'order', f'create_breakeven_{symbol}'):
                logger.warning(f"Rate limit exceeded for {exchange_key} create_breakeven_{symbol}")
                return

            # –°–æ–∑–¥–∞–µ–º –ª–∏–º–∏—Ç–Ω—ã–π –æ—Ä–¥–µ—Ä –Ω–∞ breakeven
            order_side = "SELL" if side in ["LONG", "BUY"] else "BUY"
            quantity = abs(position.get('quantity', position.get('size', 0)))

            if quantity <= 0:
                logger.error(f"Invalid quantity for {symbol}: {quantity}")
                return

            order_result = await exchange.create_limit_order(
                symbol=symbol,
                side=order_side,
                quantity=quantity,
                price=breakeven_price,
                reduce_only=True
            )

            await self.rate_limiter.record_request(exchange_key, 'order', f'create_breakeven_{symbol}')

            if order_result and order_result.get('orderId'):
                logger.info(f"‚úÖ Breakeven limit order created for {symbol}: {order_result.get('orderId')}")
                self.stats['positions_closed'] += 1
                # –°–¢–ê–¢–ò–°–¢–ò–ö–ê: –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ breakeven –æ—Ä–¥–µ—Ä–æ–≤
                self.exchange_stats[exchange_name]['positions_with_breakeven'] += 1
            else:
                logger.error(f"‚ùå Failed to create breakeven order for {symbol}")
                # –°–¢–ê–¢–ò–°–¢–ò–ö–ê: –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
                self.exchange_stats[exchange_name]['positions_with_errors'] += 1

        except Exception as e:
            logger.error(f"Error handling expired position {symbol}: {e}")
            self.stats['errors'] += 1

    async def _cancel_existing_protection_orders(self, exchange: BinanceExchange | BybitExchange, symbol: str) -> Optional[Dict]:
        """–£–ú–ù–ê–Ø –æ—Ç–º–µ–Ω–∞ –æ—Ä–¥–µ—Ä–æ–≤: —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç close-–æ—Ä–¥–µ—Ä–∞, –æ—Ç–º–µ–Ω—è–µ—Ç —Ç–æ–ª—å–∫–æ –∑–∞—â–∏—Ç—É"""

        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –æ—Ç–∫—Ä—ã—Ç—ã–µ –æ—Ä–¥–µ—Ä–∞ –¥–ª—è —Å–∏–º–≤–æ–ª–∞
        exchange_key = 'binance' if isinstance(exchange, BinanceExchange) else 'bybit'
        if not await self.rate_limiter.acquire(exchange_key, 'query', f'get_orders_{symbol}'):
            logger.warning(f"Rate limit exceeded for {exchange_key} get_orders_{symbol}")
            return None

        open_orders = await exchange.get_open_orders(symbol)
        await self.rate_limiter.record_request(exchange_key, 'query', f'get_orders_{symbol}')

        if not open_orders:
            return None

        orders_to_cancel = []
        close_order = None

        for order in open_orders:
            if order.get('symbol') != symbol:
                continue

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –æ—Ä–¥–µ—Ä–∞
            order_type = order.get('type', '').upper()
            is_reduce_only = False

            if isinstance(exchange, BinanceExchange):
                is_reduce_only = order.get('reduceOnly', False)
            else:  # Bybit - –£–õ–£–ß–®–ï–ù–ù–ê–Ø –õ–û–ì–ò–ö–ê –î–õ–Ø SL –û–†–î–ï–†–û–í
                # –î–ª—è Bybit –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —É—Å–ª–æ–≤–∏–π
                order_type_lower = order.get('type', '').lower()
                is_reduce_only = (
                    'reduce' in order_type_lower or
                    order.get('reduceOnly', False) or
                    # –Ø–í–ù–û –ø—Ä–æ–≤–µ—Ä—è–µ–º SL –æ—Ä–¥–µ—Ä–∞ –Ω–∞ Bybit
                    order_type_lower in ['stop_loss', 'stop_market', 'stop_limit'] or
                    'stop' in order_type_lower or
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–º –ø–æ–ª—è–º Bybit
                    order.get('stopOrderType', '') in ['StopLoss', 'Stop'] or
                    order.get('orderType', '') in ['StopLoss', 'Stop']
                )

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º close-–æ—Ä–¥–µ—Ä–∞ (reduce-only)
            if is_reduce_only:
                close_order = order
                logger.debug(f"üîÑ Preserving close order {order.get('orderId')} for {symbol}")
            else:
                # –û—Ç–º–µ–Ω—è–µ–º –∑–∞—â–∏—Ç–Ω—ã–µ –æ—Ä–¥–µ—Ä–∞
                orders_to_cancel.append(order)
                logger.debug(f"üóëÔ∏è Will cancel protection order {order.get('orderId')} for {symbol}")

        # –û—Ç–º–µ–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –∑–∞—â–∏—Ç–Ω—ã–µ –æ—Ä–¥–µ—Ä–∞
        if orders_to_cancel:
            logger.info(f"üóëÔ∏è Cancelling {len(orders_to_cancel)} protection orders for {symbol}")

            for order in orders_to_cancel:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º rate limit –¥–ª—è –∫–∞–∂–¥–æ–π –æ—Ç–º–µ–Ω—ã
                if not await self.rate_limiter.acquire(exchange_key, 'order', f'cancel_order_{order.get("orderId")}'):
                    logger.warning(f"Rate limit exceeded for {exchange_key} cancel_order_{order.get('orderId')}")
                    continue

                success = await exchange.cancel_order(order.get('orderId'))
                await self.rate_limiter.record_request(exchange_key, 'order', f'cancel_order_{order.get("orderId")}')

                if success:
                    logger.debug(f"‚úÖ Cancelled order {order.get('orderId')} for {symbol}")
                else:
                    logger.warning(f"‚ùå Failed to cancel order {order.get('orderId')} for {symbol}")

        if close_order:
            logger.info(f"üõ°Ô∏è Preserved close order {close_order.get('orderId')} for {symbol}")

        return close_order

    async def protect_positions(self, exchange_name: str):
        """–ó–∞—â–∏—â–∞–µ—Ç –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π –±–∏—Ä–∂–∏ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
        exchange = self.binance if exchange_name == 'Binance' else self.bybit
        semaphore = self.binance_semaphore if exchange_name == 'Binance' else self.bybit_semaphore
        if not exchange:
            logger.warning(f"‚ö†Ô∏è {exchange_name} exchange not initialized")
            return

        try:
            # ‚úÖ FIX: –û–ø—Ä–µ–¥–µ–ª—è–µ–º exchange_key –≤ –Ω–∞—á–∞–ª–µ –º–µ—Ç–æ–¥–∞
            exchange_key = 'binance' if exchange_name == 'Binance' else 'bybit'
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º rate limit –ø–µ—Ä–µ–¥ –ø–æ–ª—É—á–µ–Ω–∏–µ–º –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π
            if not await self.rate_limiter.acquire(exchange_key, 'query', 'get_open_positions'):
                logger.warning(f"Rate limit exceeded for {exchange_key} get_open_positions")
                # –°–¢–ê–¢–ò–°–¢–ò–ö–ê: –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ rate limit –æ—à–∏–±–æ–∫
                self.exchange_stats[exchange_name]['rate_limit_errors'] += 1
                return

            # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏
            positions = await exchange.get_open_positions()
            await self.rate_limiter.record_request(exchange_key, 'query', 'get_open_positions')
            if not positions:
                logger.debug(f"üì≠ No open {exchange_name} positions")
                return

            # –û–ë–ù–û–í–õ–Ø–ï–ú –°–¢–ê–¢–ò–°–¢–ò–ö–£
            self.exchange_stats[exchange_name]['positions_found'] = len(positions)
            self.exchange_stats[exchange_name]['positions_open'] = len(positions)
            self.exchange_stats[exchange_name]['last_cycle_time'] = datetime.now(timezone.utc)

            logger.info(f"üîç Found {len(positions)} {exchange_name} positions to check")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º rate limit –ø–µ—Ä–µ–¥ –ø–æ–ª—É—á–µ–Ω–∏–µ–º –æ—Ç–∫—Ä—ã—Ç—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤
            if not await self.rate_limiter.acquire(exchange_key, 'query', 'get_open_orders'):
                logger.warning(f"Rate limit exceeded for {exchange_key} get_open_orders")
                return

            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –æ—Ç–∫—Ä—ã—Ç—ã–µ –æ—Ä–¥–µ—Ä–∞
            all_open_orders = await exchange.get_open_orders()
            await self.rate_limiter.record_request(exchange_key, 'query', 'get_open_orders')
            if all_open_orders is None:
                logger.error(f"‚ùå Failed to get open orders for {exchange_name}")
                all_open_orders = []

            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –æ—Ä–¥–µ—Ä–∞ –ø–æ —Å–∏–º–≤–æ–ª–∞–º
            orders_by_symbol = {pos['symbol']: [] for pos in positions}
            for order in all_open_orders:
                symbol = order.get('symbol', '')
                if symbol in orders_by_symbol:
                    orders_by_symbol[symbol].append(order)

            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é –ø–æ–∑–∏—Ü–∏—é
            tasks = [
                self.run_with_semaphore(semaphore, self._process_single_position, exchange_name, pos, orders_by_symbol)
                for pos in positions
            ]

            if tasks:
                results = await asyncio.gather(*tasks, return_exceptions=True)
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏—è
                for i, result in enumerate(results):
                    if isinstance(result, Exception):
                        symbol = positions[i]['symbol']
                        logger.error(f"‚ùå Exception processing {exchange_name} {symbol}: {result}")
                        self.stats['errors'] += 1

        except Exception as e:
            logger.error(f"üí• Critical error in protect_{exchange_name.lower()}_positions: {e}", exc_info=True)
            self.stats['errors'] += 1

    async def run(self):
        logger.info(f"üöÄ Starting Protection Monitor v2.6")
        await self.initialize()
        try:
            while True:
                try:
                    self.stats['checks'] += 1
                    logger.info(f"=== Protection Check #{self.stats['checks']} ===")
                    await asyncio.gather(
                        self.protect_positions('Binance'),
                        self.protect_positions('Bybit')
                    )
                    if self.stats['checks'] % 10 == 0:
                        await self.print_statistics()
                    await asyncio.sleep(self.check_interval)
                except asyncio.CancelledError:
                    break
                except Exception as e:
                    logger.error(f"Error in main loop: {e}", exc_info=True)
                    self.stats['errors'] += 1
                    await asyncio.sleep(5)
        except KeyboardInterrupt:
            logger.info("‚õî Shutdown signal received")
        finally:
            await self.cleanup()

    async def print_statistics(self):
        uptime = datetime.now(timezone.utc) - self.stats['start_time']
        hours = uptime.total_seconds() / 3600
        logger.info("=" * 60)
        logger.info("Performance Statistics")
        logger.info("=" * 60)
        logger.info(f"Uptime: {hours:.2f} hours")
        logger.info(f"Checks performed: {self.stats['checks']}")
        logger.info(f"Positions protected: {self.stats['positions_protected']}")
        logger.info(f"Positions closed: {self.stats['positions_closed']}")
        logger.info(f"Errors encountered: {self.stats['errors']}")
        logger.info("=" * 60)

    async def cleanup(self):
        logger.info("üßπ Cleaning up...")
        await self.print_statistics()
        if self.binance:
            await self.binance.close()
            logger.info("Binance connection closed")
        if self.bybit:
            await self.bybit.close()
            logger.info("Bybit connection closed")

    def _calculate_position_age(self, position: Dict, exchange_name: str) -> float:
        """Calculate position age in hours - FIXED VERSION"""
        try:
            # –î–ª—è Binance –∏—Å–ø–æ–ª—å–∑—É–µ–º updateTime
            if exchange_name == "Binance":
                timestamp = position.get("updateTime", 0)
            else:  # Bybit –∏—Å–ø–æ–ª—å–∑—É–µ—Ç updatedTime
                timestamp = position.get("updatedTime", 0)

            if not timestamp:
                logger.debug(f"No timestamp found for position, returning 0 age")
                return 0.0

            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥—ã –≤ —Å–µ–∫—É–Ω–¥—ã –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            if timestamp > 1e10:  # –ï—Å–ª–∏ timestamp –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
                timestamp = timestamp / 1000

            current_time = datetime.now(timezone.utc).timestamp()
            age_seconds = current_time - timestamp
            age_hours = age_seconds / 3600  # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —á–∞—Å—ã

            logger.debug(f"Position age calculated: {age_hours:.2f} hours")
            return max(0.0, age_hours)  # –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º –Ω–µ–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ

        except Exception as e:
            logger.warning(f"Error calculating position age: {e}")
            return 0.0  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤–æ–∑–≤—Ä–∞—â–∞–µ–º 0 –µ—Å–ª–∏ —Ä–∞—Å—á–µ—Ç –Ω–µ —É–¥–∞–ª—Å—è

    async def run_with_semaphore(self, semaphore, func, *args, **kwargs):
        """Run a function with semaphore control"""
        async with semaphore:
            return await func(*args, **kwargs)

async def main():
    monitor = ProtectionMonitor()
    await monitor.run()


if __name__ == "__main__":
    asyncio.run(main())