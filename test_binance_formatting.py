#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ format_quantity –≤ Binance
–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏ —Ä–∞—Å—á–µ—Ç–∞ Stop Loss –ø—Ä–∏ –ø—Ä–æ—Å–∫–∞–ª—å–∑—ã–≤–∞–Ω–∏–∏
"""

import asyncio
import os
import sys
from decimal import Decimal, ROUND_DOWN
from dotenv import load_dotenv

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from exchanges.binance import BinanceExchange

load_dotenv()


class FormatQuantityTester:
    def __init__(self):
        self.exchange = None
        self.test_cases = [
            # (symbol, quantity, expected_result_range)
            ("BTCUSDT", 0.001, (0.001, 0.001)),
            ("ETHUSDT", 0.01, (0.01, 0.01)),
            ("AVAXUSDT", 0.674878, (0.67, 0.68)),  # –ò–∑ –≤–∞—à–µ–≥–æ –ª–æ–≥–∞
            ("AAVEUSDT", 0.065212, (0.06, 0.07)),  # –ò–∑ –≤–∞—à–µ–≥–æ –ª–æ–≥–∞ - –ü–†–û–ë–õ–ï–ú–ù–´–ô
            ("SOLUSDT", 0.1234, (0.1, 0.13)),
            ("DOTUSDT", 1.5678, (1.5, 1.6)),
            ("1000PEPEUSDT", 100.123, (100, 101)),
        ]

    async def initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Binance"""
        config = {
            'api_key': os.getenv('BINANCE_API_KEY'),
            'api_secret': os.getenv('BINANCE_API_SECRET'),
            'testnet': True
        }

        self.exchange = BinanceExchange(config)
        await self.exchange.initialize()
        print(f"‚úÖ Binance {'testnet' if config['testnet'] else 'mainnet'} initialized")
        print(f"   Loaded {len(self.exchange.exchange_info)} symbols\n")

    def test_format_quantity_manual(self, symbol: str, quantity: float):
        """–†—É—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª–∞"""
        if symbol not in self.exchange.exchange_info:
            print(f"‚ùå Symbol {symbol} not found in exchange info")
            return None

        filters = self.exchange.exchange_info[symbol]['filters']
        lot_size_filter = next((f for f in filters if f['filterType'] == 'LOT_SIZE'), None)

        if not lot_size_filter:
            print(f"‚ùå LOT_SIZE filter not found for {symbol}")
            return None

        step_size = Decimal(lot_size_filter['stepSize'])
        min_qty = Decimal(lot_size_filter['minQty'])
        max_qty = Decimal(lot_size_filter['maxQty'])

        print(f"üìä {symbol} LOT_SIZE Filter:")
        print(f"   Step Size: {step_size}")
        print(f"   Min Qty: {min_qty}")
        print(f"   Max Qty: {max_qty}")

        # –¢–µ–∫—É—â–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –∏–∑ binance.py
        quantity_decimal = Decimal(str(quantity))
        quantized_qty = (quantity_decimal / step_size).quantize(Decimal('1'), rounding=ROUND_DOWN) * step_size

        # –ü—Ä–æ–±–ª–µ–º–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ - –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ decimals
        step_str = str(step_size).rstrip('0')
        decimals_old = len(step_str.split('.')[1]) if '.' in step_str else 0

        # –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Å–ø–æ—Å–æ–±
        decimals_new = abs(step_size.as_tuple().exponent)

        formatted_old = format(quantized_qty, f'.{decimals_old}f')
        formatted_new = f"{quantized_qty:.{decimals_new}f}"

        print(f"\n   Input quantity: {quantity}")
        print(f"   Quantized: {quantized_qty}")
        print(f"   Decimals (OLD method): {decimals_old}")
        print(f"   Decimals (NEW method): {decimals_new}")
        print(f"   Formatted (OLD): {formatted_old}")
        print(f"   Formatted (NEW): {formatted_new}")

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –º–µ—Ç–æ–¥
        formatted_builtin = self.exchange.format_quantity(symbol, quantity)
        print(f"   Formatted (BUILTIN): {formatted_builtin}")

        return {
            'old': float(formatted_old),
            'new': float(formatted_new),
            'builtin': float(formatted_builtin)
        }

    async def run_tests(self):
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
        await self.initialize()

        print("=" * 60)
        print("TESTING format_quantity FUNCTION")
        print("=" * 60)

        failed_tests = []

        for symbol, quantity, expected_range in self.test_cases:
            print(f"\nüîç Testing {symbol} with quantity {quantity}")
            print("-" * 40)

            result = self.test_format_quantity_manual(symbol, quantity)

            if result:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                if result['builtin'] == 0:
                    print(f"   ‚ö†Ô∏è  WARNING: Builtin method returned 0!")
                    failed_tests.append((symbol, quantity, result))
                elif result['builtin'] < expected_range[0] or result['builtin'] > expected_range[1]:
                    print(f"   ‚ö†Ô∏è  WARNING: Result {result['builtin']} outside expected range {expected_range}")
                else:
                    print(f"   ‚úÖ PASSED: {result['builtin']} in range {expected_range}")

            print()

        # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
        print("\n" + "=" * 60)
        print("TEST SUMMARY")
        print("=" * 60)

        if failed_tests:
            print(f"‚ùå {len(failed_tests)} tests failed:")
            for symbol, qty, result in failed_tests:
                print(f"   {symbol}: {qty} -> {result['builtin']}")
            print("\nüîß RECOMMENDATION: Update format_quantity to use:")
            print("   precision = abs(Decimal(step_size).as_tuple().exponent)")
            print("   return f\"{quantized_qty:.{precision}f}\"")
        else:
            print("‚úÖ All tests passed!")

        await self.test_stop_loss_calculation()

    async def test_stop_loss_calculation(self):
        """–¢–µ—Å—Ç —Ä–∞—Å—á–µ—Ç–∞ Stop Loss –ø—Ä–∏ –ø—Ä–æ—Å–∫–∞–ª—å–∑—ã–≤–∞–Ω–∏–∏"""
        print("\n" + "=" * 60)
        print("TESTING STOP LOSS CALCULATION")
        print("=" * 60)

        test_scenarios = [
            {
                'name': 'LONG –±–µ–∑ –ø—Ä–æ—Å–∫–∞–ª—å–∑—ã–≤–∞–Ω–∏—è',
                'side': 'BUY',
                'entry_price': 100.0,
                'current_price': 100.0,
                'sl_percent': 2.0,
                'expected_sl': 98.0
            },
            {
                'name': 'LONG —Å –ø—Ä–æ—Å–∫–∞–ª—å–∑—ã–≤–∞–Ω–∏–µ–º –≤–≤–µ—Ä—Ö',
                'side': 'BUY',
                'entry_price': 100.0,
                'current_price': 95.0,  # –¶–µ–Ω–∞ —É–ø–∞–ª–∞ –ø–æ—Å–ª–µ –≤—Ö–æ–¥–∞
                'sl_percent': 2.0,
                'expected_sl': 93.15  # 95 * 0.98 (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–∏–∂–µ —Ç–µ–∫—É—â–µ–π)
            },
            {
                'name': 'SHORT –±–µ–∑ –ø—Ä–æ—Å–∫–∞–ª—å–∑—ã–≤–∞–Ω–∏—è',
                'side': 'SELL',
                'entry_price': 100.0,
                'current_price': 100.0,
                'sl_percent': 2.0,
                'expected_sl': 102.0
            },
            {
                'name': 'SHORT —Å –ø—Ä–æ—Å–∫–∞–ª—å–∑—ã–≤–∞–Ω–∏–µ–º',
                'side': 'SELL',
                'entry_price': 100.0,
                'current_price': 105.0,  # –¶–µ–Ω–∞ –≤—ã—Ä–æ—Å–ª–∞ –ø–æ—Å–ª–µ –≤—Ö–æ–¥–∞
                'sl_percent': 2.0,
                'expected_sl': 107.1  # 105 * 1.02 (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤—ã—à–µ —Ç–µ–∫—É—â–µ–π)
            },
            {
                'name': '–†–µ–∞–ª—å–Ω—ã–π –∫–µ–π—Å –∏–∑ –ª–æ–≥–∞ (RADUSDT)',
                'side': 'BUY',
                'entry_price': 0.244,  # –¶–µ–Ω–∞ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è —Å –ø—Ä–æ—Å–∫–∞–ª—å–∑—ã–≤–∞–Ω–∏–µ–º
                'current_price': 0.196,  # –†–µ–∞–ª—å–Ω–∞—è —Ä—ã–Ω–æ—á–Ω–∞—è —Ü–µ–Ω–∞
                'sl_percent': 2.0,
                'expected_sl': 0.192  # 0.196 * 0.98
            }
        ]

        for scenario in test_scenarios:
            print(f"\nüìç {scenario['name']}:")
            print(f"   Entry: ${scenario['entry_price']:.4f}")
            print(f"   Current: ${scenario['current_price']:.4f}")
            print(f"   SL %: {scenario['sl_percent']}%")

            # –°—Ç–∞—Ä—ã–π —Ä–∞—Å—á–µ—Ç (–º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–º)
            if scenario['side'] == 'BUY':
                sl_old = scenario['entry_price'] * (1 - scenario['sl_percent'] / 100)
            else:
                sl_old = scenario['entry_price'] * (1 + scenario['sl_percent'] / 100)

            # –ù–æ–≤—ã–π —Ä–∞—Å—á–µ—Ç —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π
            if scenario['side'] == 'BUY':
                sl_new = scenario['entry_price'] * (1 - scenario['sl_percent'] / 100)
                if sl_new >= scenario['current_price']:
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—Ç –∂–µ –ø—Ä–æ—Ü–µ–Ω—Ç –æ—Ç —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã
                    sl_new = scenario['current_price'] * (1 - scenario['sl_percent'] / 100)
                    print(f"   ‚ö†Ô∏è  SL adjusted due to slippage")
            else:  # SELL/SHORT
                sl_new = scenario['entry_price'] * (1 + scenario['sl_percent'] / 100)
                if sl_new <= scenario['current_price']:
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—Ç –∂–µ –ø—Ä–æ—Ü–µ–Ω—Ç –æ—Ç —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã
                    sl_new = scenario['current_price'] * (1 + scenario['sl_percent'] / 100)
                    print(f"   ‚ö†Ô∏è  SL adjusted due to slippage")

            print(f"   SL (old logic): ${sl_old:.4f}")
            print(f"   SL (new logic): ${sl_new:.4f}")

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏
            is_valid = True
            if scenario['side'] == 'BUY':
                if sl_new >= scenario['current_price']:
                    print(f"   ‚ùå ERROR: SL ${sl_new:.4f} >= current ${scenario['current_price']:.4f}")
                    is_valid = False
            else:
                if sl_new <= scenario['current_price']:
                    print(f"   ‚ùå ERROR: SL ${sl_new:.4f} <= current ${scenario['current_price']:.4f}")
                    is_valid = False

            if is_valid:
                print(f"   ‚úÖ VALID: SL correctly positioned")


async def main():
    tester = FormatQuantityTester()
    await tester.run_tests()

    # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
    if tester.exchange:
        await tester.exchange.close()


if __name__ == "__main__":
    asyncio.run(main())