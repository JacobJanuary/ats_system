# check_trailing_stops_testnet.py

import asyncio
import aiohttp
import hmac
import hashlib
import time
import os
import json
from dotenv import load_dotenv

load_dotenv()


async def check_all_positions_protection():
    api_key = os.getenv('BYBIT_API_KEY')
    api_secret = os.getenv('BYBIT_API_SECRET')

    if not api_key or not api_secret:
        print("‚ùå –û—à–∏–±–∫–∞: –ù–µ –Ω–∞–π–¥–µ–Ω—ã API –∫–ª—é—á–∏ –≤ .env —Ñ–∞–π–ª–µ")
        return

    print(f"üîë API Key: {api_key[:10]}...")

    try:
        # –í–ê–ñ–ù–û: –î–ª—è testnet –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –Ω—É–∂–µ–Ω settleCoin!
        timestamp = str(int(time.time() * 1000))
        params = {
            "category": "linear",
            "settleCoin": "USDT",  # –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–´–ô –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è testnet
            "limit": "200"
        }

        # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–æ–∫—É –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è –ø–æ–¥–ø–∏—Å–∏
        param_str = "&".join([f"{k}={v}" for k, v in sorted(params.items())])

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å—å
        sign_str = timestamp + api_key + "5000" + param_str
        signature = hmac.new(
            api_secret.encode('utf-8'),
            sign_str.encode('utf-8'),
            hashlib.sha256
        ).hexdigest()

        headers = {
            "X-BAPI-API-KEY": api_key,
            "X-BAPI-SIGN": signature,
            "X-BAPI-TIMESTAMP": timestamp,
            "X-BAPI-RECV-WINDOW": "5000"
        }

        # URL –¥–ª—è testnet
        base_url = "https://api-testnet.bybit.com"
        url = f"{base_url}/v5/position/list?{param_str}"

        print(f"üì° –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ TESTNET")
        print(f"üîó –ó–∞–ø—Ä–æ—Å –ø–æ–∑–∏—Ü–∏–π —Å settleCoin=USDT")

        async with aiohttp.ClientSession() as session:
            async with session.get(url, headers=headers) as response:
                print(f"üìä –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: {response.status}")

                response_text = await response.text()

                try:
                    data = json.loads(response_text)
                except json.JSONDecodeError:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON:")
                    print(response_text[:500])
                    return

                if data.get('retCode') != 0:
                    print(f"‚ùå –û—à–∏–±–∫–∞ API: {data.get('retMsg')}")
                    print(f"–ö–æ–¥ –æ—à–∏–±–∫–∏: {data.get('retCode')}")

                    # –ü—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –±–µ–∑ settleCoin
                    print("\nüîÑ –ü—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –∑–∞–ø—Ä–æ—Å...")
                    return await try_alternative_request(api_key, api_secret)

                positions = data.get('result', {}).get('list', [])
                open_positions = [p for p in positions if float(p.get('size', 0)) > 0]

                if not open_positions:
                    print("‚ö†Ô∏è –ù–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π")
                    return

                print(f"\n{'=' * 70}")
                print(f"üìà –ê–ù–ê–õ–ò–ó TRAILING STOP –î–õ–Ø {len(open_positions)} –ü–û–ó–ò–¶–ò–ô")
                print(f"{'=' * 70}\n")

                analyze_positions(open_positions)

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()


async def try_alternative_request(api_key, api_secret):
    """–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–π"""
    print("üîÑ –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –ø–æ–∑–∏—Ü–∏–∏ –ø–æ –æ–¥–Ω–æ–π...")

    # –°–ø–∏—Å–æ–∫ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ –Ω–∞ testnet
    test_symbols = ["BTCUSDT", "ETHUSDT", "SOLUSDT", "XRPUSDT"]
    all_positions = []

    for symbol in test_symbols:
        timestamp = str(int(time.time() * 1000))
        params = {
            "category": "linear",
            "symbol": symbol  # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Å–∏–º–≤–æ–ª
        }

        param_str = "&".join([f"{k}={v}" for k, v in sorted(params.items())])
        sign_str = timestamp + api_key + "5000" + param_str
        signature = hmac.new(
            api_secret.encode('utf-8'),
            sign_str.encode('utf-8'),
            hashlib.sha256
        ).hexdigest()

        headers = {
            "X-BAPI-API-KEY": api_key,
            "X-BAPI-SIGN": signature,
            "X-BAPI-TIMESTAMP": timestamp,
            "X-BAPI-RECV-WINDOW": "5000"
        }

        url = f"https://api-testnet.bybit.com/v5/position/list?{param_str}"

        async with aiohttp.ClientSession() as session:
            async with session.get(url, headers=headers) as response:
                if response.status == 200:
                    data = await response.json()
                    if data.get('retCode') == 0:
                        positions = data.get('result', {}).get('list', [])
                        for pos in positions:
                            if float(pos.get('size', 0)) > 0:
                                all_positions.append(pos)
                                print(f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ –ø–æ–∑–∏—Ü–∏—è: {symbol}")

    if all_positions:
        print(f"\nüìä –ù–∞–π–¥–µ–Ω–æ {len(all_positions)} –ø–æ–∑–∏—Ü–∏–π —á–µ—Ä–µ–∑ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥")
        analyze_positions(all_positions)
    else:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–∑–∏—Ü–∏–∏")


def analyze_positions(open_positions):
    """–ê–Ω–∞–ª–∏–∑ –ø–æ–∑–∏—Ü–∏–π –Ω–∞ –Ω–∞–ª–∏—á–∏–µ Trailing Stop"""

    ts_set = 0
    ts_active = 0
    ts_not_set = 0

    positions_with_ts = []
    positions_without_ts = []

    for pos in open_positions:
        symbol = pos.get('symbol')
        trailing_stop = pos.get('trailingStop')
        mark_price = float(pos.get('markPrice', 0))
        entry_price = float(pos.get('avgPrice', 0))
        side = pos.get('side')
        size = float(pos.get('size', 0))

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º Stop Loss
        stop_loss = pos.get('stopLoss')
        has_sl = stop_loss and stop_loss != '0' and stop_loss != ''

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º Trailing Stop
        if trailing_stop and trailing_stop != '0' and trailing_stop != '':
            ts_set += 1

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ P&L
            if entry_price > 0:
                if side == 'Buy':
                    pnl_percent = (mark_price - entry_price) / entry_price * 100
                    # TS –æ–±—ã—á–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç—Å—è –ø—Ä–∏ –ø—Ä–∏–±—ã–ª–∏ > 0.5-1%
                    if pnl_percent > 0.5:
                        ts_active += 1
                        status = "‚úÖ –ê–ö–¢–ò–í–ò–†–û–í–ê–ù"
                    else:
                        status = f"‚è∏Ô∏è –û–ñ–ò–î–ê–ï–¢ (P&L: {pnl_percent:.2f}%)"
                else:  # Sell/Short
                    pnl_percent = (entry_price - mark_price) / entry_price * 100
                    if pnl_percent > 0.5:
                        ts_active += 1
                        status = "‚úÖ –ê–ö–¢–ò–í–ò–†–û–í–ê–ù"
                    else:
                        status = f"‚è∏Ô∏è –û–ñ–ò–î–ê–ï–¢ (P&L: {pnl_percent:.2f}%)"
            else:
                status = "‚ö†Ô∏è –°–¢–ê–¢–£–° –ù–ï–ò–ó–í–ï–°–¢–ï–ù"
                pnl_percent = 0

            print(f"üìå {symbol} ({side}):")
            print(f"   –†–∞–∑–º–µ—Ä: {size}")
            print(f"   Stop Loss: {'‚úÖ' if has_sl else '‚ùå'} {stop_loss if has_sl else '–ù–ï–¢'}")
            print(f"   Trailing Stop: {status}")
            print(f"   TS Distance: {trailing_stop}")
            print(f"   Entry: {entry_price:.4f} | Current: {mark_price:.4f}")
            print(f"   P&L: {pnl_percent:.2f}%")
            print()

            positions_with_ts.append(symbol)
        else:
            ts_not_set += 1
            positions_without_ts.append(symbol)

            print(f"‚ùå {symbol} ({side}):")
            print(f"   –†–∞–∑–º–µ—Ä: {size}")
            print(f"   Stop Loss: {'‚úÖ' if has_sl else '‚ùå'} {stop_loss if has_sl else '–ù–ï–¢'}")
            print(f"   Trailing Stop: –ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù")
            print(f"   Entry: {entry_price:.4f} | Current: {mark_price:.4f}")
            print()

    # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    total = len(open_positions)
    print(f"\n{'=' * 70}")
    print(f"üìä –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
    print(f"{'=' * 70}")
    print(f"–í—Å–µ–≥–æ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π: {total}")
    print(f"‚úÖ Trailing Stop —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {ts_set} ({ts_set * 100 / total:.1f}%)")
    print(f"üü¢ Trailing Stop –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω: {ts_active} ({ts_active * 100 / total:.1f}%)")
    print(f"‚è∏Ô∏è Trailing Stop –æ–∂–∏–¥–∞–µ—Ç: {ts_set - ts_active} ({(ts_set - ts_active) * 100 / total:.1f}%)")
    print(f"‚ùå Trailing Stop –ù–ï —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {ts_not_set} ({ts_not_set * 100 / total:.1f}%)")

    print(f"\nüí° –í–´–í–û–î–´:")
    if ts_active == 20:
        print("‚úÖ 20 –∞–∫—Ç–∏–≤–Ω—ã—Ö TS —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –≤ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ!")

    if ts_not_set > 0:
        print(f"‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: {ts_not_set} –ø–æ–∑–∏—Ü–∏–π –±–µ–∑ Trailing Stop!")
        print("   –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∑–∞–ø—É—Å—Ç–∏—Ç—å protection_monitor.py")

    if ts_set > ts_active:
        print(f"‚ÑπÔ∏è {ts_set - ts_active} Trailing Stops –æ–∂–∏–¥–∞—é—Ç –∞–∫—Ç–∏–≤–∞—Ü–∏–∏")
        print("   –û–Ω–∏ –∞–∫—Ç–∏–≤–∏—Ä—É—é—Ç—Å—è –∫–æ–≥–¥–∞ –ø–æ–∑–∏—Ü–∏—è –≤—ã–π–¥–µ—Ç –≤ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω—É—é –ø—Ä–∏–±—ã–ª—å")


if __name__ == "__main__":
    print("üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ Trailing Stops –Ω–∞ Bybit TESTNET...\n")
    asyncio.run(check_all_positions_protection())