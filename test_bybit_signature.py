#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —á—Ç–æ –≤—Å–µ –æ—à–∏–±–∫–∏ –ø–æ–¥–ø–∏—Å–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã
–î–æ–ª–∂–µ–Ω –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è –ë–ï–ó –æ—à–∏–±–æ–∫ –ø–æ–¥–ø–∏—Å–∏
"""

import asyncio
import os
import sys
import logging
from datetime import datetime, timezone
from dotenv import load_dotenv

sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from exchanges.bybit import BybitExchange

logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

load_dotenv()


async def test_all_api_calls():
    """
    –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≤—Å–µ –æ—Å–Ω–æ–≤–Ω—ã–µ API –≤—ã–∑–æ–≤—ã –∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –æ—à–∏–±–æ–∫ –ø–æ–¥–ø–∏—Å–∏
    """

    exchange = BybitExchange({
        'api_key': os.getenv('BYBIT_API_KEY'),
        'api_secret': os.getenv('BYBIT_API_SECRET'),
        'testnet': True
    })

    errors = []
    success_count = 0
    total_tests = 0

    try:
        logger.info("=" * 60)
        logger.info("–¢–ï–°–¢ –í–°–ï–• API –í–´–ó–û–í–û–í –ë–ï–ó –û–®–ò–ë–û–ö –ü–û–î–ü–ò–°–ò")
        logger.info("=" * 60)

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
        await exchange.initialize()
        logger.info("‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞")

        # –¢–µ—Å—Ç 1: –ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞
        logger.info("\nüìå –¢–µ—Å—Ç 1: –ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞")
        total_tests += 1
        try:
            balance = await exchange.get_balance()
            logger.info(f"   ‚úÖ –ë–∞–ª–∞–Ω—Å –ø–æ–ª—É—á–µ–Ω: ${balance:.2f}")
            success_count += 1
        except Exception as e:
            logger.error(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")
            errors.append(f"get_balance: {e}")

        # –¢–µ—Å—Ç 2: –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–∏–∫–µ—Ä–∞
        logger.info("\nüìå –¢–µ—Å—Ç 2: –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–∏–∫–µ—Ä–∞")
        total_tests += 1
        try:
            ticker = await exchange.get_ticker('BTCUSDT')
            if ticker:
                logger.info(f"   ‚úÖ –¢–∏–∫–µ—Ä –ø–æ–ª—É—á–µ–Ω: ${ticker.get('price'):.2f}")
                success_count += 1
            else:
                logger.error("   ‚ùå –¢–∏–∫–µ—Ä –Ω–µ –ø–æ–ª—É—á–µ–Ω")
                errors.append("get_ticker: –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç")
        except Exception as e:
            logger.error(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")
            errors.append(f"get_ticker: {e}")

        # –¢–µ—Å—Ç 3: –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–π
        logger.info("\nüìå –¢–µ—Å—Ç 3: –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–π")
        total_tests += 1
        try:
            positions = await exchange.get_open_positions()
            logger.info(f"   ‚úÖ –ü–æ–∑–∏—Ü–∏–∏ –ø–æ–ª—É—á–µ–Ω—ã: {len(positions)} —à—Ç")
            success_count += 1
        except Exception as e:
            logger.error(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")
            errors.append(f"get_open_positions: {e}")

        # –¢–µ—Å—Ç 4: –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤
        logger.info("\nüìå –¢–µ—Å—Ç 4: –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤")
        total_tests += 1
        try:
            orders = await exchange.get_open_orders('BTCUSDT')
            logger.info(f"   ‚úÖ –û—Ä–¥–µ—Ä–∞ –ø–æ–ª—É—á–µ–Ω—ã: {len(orders)} —à—Ç")
            success_count += 1
        except Exception as e:
            logger.error(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")
            errors.append(f"get_open_orders: {e}")

        # –¢–µ—Å—Ç 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –æ—Ä–¥–µ—Ä–∞ —á–µ—Ä–µ–∑ /v5/order/realtime
        logger.info("\nüìå –¢–µ—Å—Ç 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —á–µ—Ä–µ–∑ /v5/order/realtime")
        total_tests += 1
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω—ã–π orderId –¥–ª—è —Ç–µ—Å—Ç–∞
            result = await exchange._make_request(
                "GET",
                "/v5/order/realtime",
                {
                    'category': 'linear',
                    'orderId': 'test-order-123',
                    'openOnly': 0
                },
                signed=True
            )
            # –û–∂–∏–¥–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫, —Ç–∞–∫ –∫–∞–∫ –æ—Ä–¥–µ—Ä –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            if result is not None:
                logger.info(f"   ‚úÖ –ó–∞–ø—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–µ–Ω –±–µ–∑ –æ—à–∏–±–∫–∏ –ø–æ–¥–ø–∏—Å–∏")
                success_count += 1
            else:
                logger.info(f"   ‚úÖ –ó–∞–ø—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–µ–Ω (–ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ–∂–∏–¥–∞–µ–º)")
                success_count += 1
        except Exception as e:
            if "sign error" in str(e).lower():
                logger.error(f"   ‚ùå –û–®–ò–ë–ö–ê –ü–û–î–ü–ò–°–ò: {e}")
                errors.append(f"order/realtime —Å orderId: –û–®–ò–ë–ö–ê –ü–û–î–ü–ò–°–ò!")
            else:
                logger.error(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")
                errors.append(f"order/realtime: {e}")

        # –¢–µ—Å—Ç 6: –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –æ—Ä–¥–µ—Ä–æ–≤ –ë–ï–ó orderId
        logger.info("\nüìå –¢–µ—Å—Ç 6: –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –æ—Ä–¥–µ—Ä–æ–≤ –ë–ï–ó orderId")
        total_tests += 1
        try:
            result = await exchange._make_request(
                "GET",
                "/v5/order/history",
                {
                    'category': 'linear',
                    'symbol': 'BTCUSDT',
                    'limit': 5
                },
                signed=True
            )
            if result:
                logger.info(f"   ‚úÖ –ò—Å—Ç–æ—Ä–∏—è –ø–æ–ª—É—á–µ–Ω–∞: {len(result.get('list', []))} –æ—Ä–¥–µ—Ä–æ–≤")
                success_count += 1
            else:
                logger.info(f"   ‚úÖ –ó–∞–ø—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–µ–Ω (–ø—É—Å—Ç–∞—è –∏—Å—Ç–æ—Ä–∏—è)")
                success_count += 1
        except Exception as e:
            if "sign error" in str(e).lower():
                logger.error(f"   ‚ùå –û–®–ò–ë–ö–ê –ü–û–î–ü–ò–°–ò: {e}")
                errors.append(f"order/history: –û–®–ò–ë–ö–ê –ü–û–î–ü–ò–°–ò!")
            else:
                logger.error(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")
                errors.append(f"order/history: {e}")

        # –¢–µ—Å—Ç 7: –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–π —Å orderId
        logger.info("\nüìå –¢–µ—Å—Ç 7: –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–π —Å orderId")
        total_tests += 1
        try:
            result = await exchange._make_request(
                "GET",
                "/v5/execution/list",
                {
                    'category': 'linear',
                    'orderId': 'test-order-123',
                    'limit': 10
                },
                signed=True
            )
            if result:
                logger.info(f"   ‚úÖ –ò—Å–ø–æ–ª–Ω–µ–Ω–∏—è –ø–æ–ª—É—á–µ–Ω—ã: {len(result.get('list', []))}")
                success_count += 1
            else:
                logger.info(f"   ‚úÖ –ó–∞–ø—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–µ–Ω (–Ω–µ—Ç –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–π)")
                success_count += 1
        except Exception as e:
            if "sign error" in str(e).lower():
                logger.error(f"   ‚ùå –û–®–ò–ë–ö–ê –ü–û–î–ü–ò–°–ò: {e}")
                errors.append(f"execution/list —Å orderId: –û–®–ò–ë–ö–ê –ü–û–î–ü–ò–°–ò!")
            else:
                logger.error(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")
                errors.append(f"execution/list: {e}")

        # –¢–µ—Å—Ç 8: –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–π —Å symbol
        logger.info("\nüìå –¢–µ—Å—Ç 8: –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–π —Å symbol")
        total_tests += 1
        try:
            result = await exchange._make_request(
                "GET",
                "/v5/execution/list",
                {
                    'category': 'linear',
                    'symbol': 'BTCUSDT',
                    'limit': 5
                },
                signed=True
            )
            if result:
                logger.info(f"   ‚úÖ –ò—Å–ø–æ–ª–Ω–µ–Ω–∏—è –ø–æ–ª—É—á–µ–Ω—ã: {len(result.get('list', []))}")
                success_count += 1
            else:
                logger.info(f"   ‚úÖ –ó–∞–ø—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–µ–Ω")
                success_count += 1
        except Exception as e:
            if "sign error" in str(e).lower():
                logger.error(f"   ‚ùå –û–®–ò–ë–ö–ê –ü–û–î–ü–ò–°–ò: {e}")
                errors.append(f"execution/list —Å symbol: –û–®–ò–ë–ö–ê –ü–û–î–ü–ò–°–ò!")
            else:
                logger.error(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")
                errors.append(f"execution/list —Å symbol: {e}")

        # –¢–µ—Å—Ç 9: –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫—Ä–µ–¥–∏—Ç–Ω–æ–≥–æ –ø–ª–µ—á–∞ (POST –∑–∞–ø—Ä–æ—Å)
        logger.info("\nüìå –¢–µ—Å—Ç 9: –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫—Ä–µ–¥–∏—Ç–Ω–æ–≥–æ –ø–ª–µ—á–∞ (POST)")
        total_tests += 1
        try:
            result = await exchange.set_leverage('BTCUSDT', 5)
            if result:
                logger.info(f"   ‚úÖ –ö—Ä–µ–¥–∏—Ç–Ω–æ–µ –ø–ª–µ—á–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ/–ø—Ä–æ–≤–µ—Ä–µ–Ω–æ")
                success_count += 1
            else:
                logger.info(f"   ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å (–≤–æ–∑–º–æ–∂–Ω–æ —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ)")
                success_count += 1  # –≠—Ç–æ –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ
        except Exception as e:
            if "sign error" in str(e).lower():
                logger.error(f"   ‚ùå –û–®–ò–ë–ö–ê –ü–û–î–ü–ò–°–ò: {e}")
                errors.append(f"set_leverage: –û–®–ò–ë–ö–ê –ü–û–î–ü–ò–°–ò!")
            else:
                logger.error(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")
                errors.append(f"set_leverage: {e}")

        # –¢–µ—Å—Ç 10: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∞–ª—å–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –∏ –æ—Ç–º–µ–Ω—ã –ª–∏–º–∏—Ç–Ω–æ–≥–æ –æ—Ä–¥–µ—Ä–∞
        logger.info("\nüìå –¢–µ—Å—Ç 10: –°–æ–∑–¥–∞–Ω–∏–µ –∏ –æ—Ç–º–µ–Ω–∞ –ª–∏–º–∏—Ç–Ω–æ–≥–æ –æ—Ä–¥–µ—Ä–∞")
        total_tests += 1
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É
            ticker = await exchange.get_ticker('BTCUSDT')
            if ticker and ticker.get('price'):
                # –°–æ–∑–¥–∞–µ–º –ª–∏–º–∏—Ç–Ω—ã–π –æ—Ä–¥–µ—Ä –ø–æ —Ü–µ–Ω–µ –Ω–∞ 10% –Ω–∏–∂–µ —Ä—ã–Ω–∫–∞
                limit_price = ticker['price'] * 0.9

                params = {
                    'category': 'linear',
                    'symbol': 'BTCUSDT',
                    'side': 'Buy',
                    'orderType': 'Limit',
                    'qty': exchange.format_quantity('BTCUSDT', 0.001),
                    'price': exchange.format_price('BTCUSDT', limit_price),
                    'timeInForce': 'GTC'
                }

                # –°–æ–∑–¥–∞–µ–º –æ—Ä–¥–µ—Ä
                order_result = await exchange._make_request("POST", "/v5/order/create", params, signed=True)

                if order_result and 'orderId' in order_result:
                    order_id = order_result['orderId']
                    logger.info(f"   ‚úÖ –õ–∏–º–∏—Ç–Ω—ã–π –æ—Ä–¥–µ—Ä —Å–æ–∑–¥–∞–Ω: {order_id}")

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å
                    await asyncio.sleep(1)

                    status_result = await exchange._make_request(
                        "GET",
                        "/v5/order/realtime",
                        {
                            'category': 'linear',
                            'orderId': order_id,
                            'openOnly': 1
                        },
                        signed=True
                    )

                    if status_result and 'list' in status_result:
                        logger.info(f"   ‚úÖ –°—Ç–∞—Ç—É—Å –æ—Ä–¥–µ—Ä–∞ –ø–æ–ª—É—á–µ–Ω –±–µ–∑ –æ—à–∏–±–∫–∏ –ø–æ–¥–ø–∏—Å–∏")

                    # –û—Ç–º–µ–Ω—è–µ–º –æ—Ä–¥–µ—Ä
                    cancel_params = {
                        'category': 'linear',
                        'symbol': 'BTCUSDT',
                        'orderId': order_id
                    }

                    cancel_result = await exchange._make_request(
                        "POST",
                        "/v5/order/cancel",
                        cancel_params,
                        signed=True
                    )

                    if cancel_result:
                        logger.info(f"   ‚úÖ –û—Ä–¥–µ—Ä —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω")

                    success_count += 1
                else:
                    logger.error(f"   ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –æ—Ä–¥–µ—Ä")
                    errors.append("create_limit_order: –Ω–µ —Å–æ–∑–¥–∞–Ω")
            else:
                logger.error(f"   ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—É")
                errors.append("create_limit_order: –Ω–µ—Ç —Ü–µ–Ω—ã")

        except Exception as e:
            if "sign error" in str(e).lower():
                logger.error(f"   ‚ùå –û–®–ò–ë–ö–ê –ü–û–î–ü–ò–°–ò: {e}")
                errors.append(f"limit_order_test: –û–®–ò–ë–ö–ê –ü–û–î–ü–ò–°–ò!")
            else:
                logger.error(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")
                errors.append(f"limit_order_test: {e}")

        # –ò–¢–û–ì–ò
        logger.info("\n" + "=" * 60)
        logger.info("–†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
        logger.info("=" * 60)
        logger.info(f"–í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {total_tests}")
        logger.info(f"–£—Å–ø–µ—à–Ω–æ: {success_count}")
        logger.info(f"–ü—Ä–æ–≤–∞–ª–µ–Ω–æ: {total_tests - success_count}")

        if errors:
            logger.error("\n‚ùå –û–ë–ù–ê–†–£–ñ–ï–ù–ù–´–ï –û–®–ò–ë–ö–ò:")
            for error in errors:
                logger.error(f"   - {error}")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏ –ø–æ–¥–ø–∏—Å–∏
            signature_errors = [e for e in errors if "–û–®–ò–ë–ö–ê –ü–û–î–ü–ò–°–ò" in e]
            if signature_errors:
                logger.error("\nüî¥ –ö–†–ò–¢–ò–ß–ù–û: –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –æ—à–∏–±–∫–∏ –ø–æ–¥–ø–∏—Å–∏!")
                logger.error("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –ø–æ–¥–ø–∏—Å–∏ –≤ –º–µ—Ç–æ–¥–µ _make_request")
                return False
        else:
            logger.info("\n‚úÖ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –ë–ï–ó –û–®–ò–ë–û–ö!")

        return len(errors) == 0

    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        logger.error(traceback.format_exc())
        return False

    finally:
        if exchange:
            await exchange.close()
            logger.info("–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ")


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    success = await test_all_api_calls()

    if success:
        logger.info("\n‚úÖ –í–°–ï –û–®–ò–ë–ö–ò –ü–û–î–ü–ò–°–ò –ò–°–ü–†–ê–í–õ–ï–ù–´!")
        logger.info("–ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤ production")
    else:
        logger.error("\n‚ùå –û–ë–ù–ê–†–£–ñ–ï–ù–´ –ü–†–û–ë–õ–ï–ú–´ –° –ü–û–î–ü–ò–°–¨–Æ")
        logger.error("–¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ç–ª–∞–¥–∫–∞")

    return success


if __name__ == "__main__":
    result = asyncio.run(main())
    sys.exit(0 if result else 1)